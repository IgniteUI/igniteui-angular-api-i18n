{
    "IgxTooltipDirective": {
        "comment": {
            "text": [
                "The Ignite UI for Angular Tooltip directive is used to mark an HTML element in the markup as one that should behave as a tooltip.",
                "The tooltip is used in combination with the Ignite UI for Angular Tooltip Target by assigning the exported tooltip reference to the",
                "respective target's selector property.",
                "Example:",
                "```html",
                "<button [igxTooltipTarget]=\"tooltipRef\">Hover me</button>",
                "<span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>",
                "```"
            ],
            "shortText": [
                "**Ignite UI for Angular Tooltip** -",
                "[Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tooltip.html)"
            ]
        },
        "properties": {
            "context": {
                "comment": {
                    "text": [
                        "```typescript",
                        "// get",
                        "let tooltipContext = this.tooltip.context;",
                        "```",
                        "```typescript",
                        "// set",
                        "this.tooltip.context = \"Tooltip's context\";",
                        "```"
                    ],
                    "shortText": [
                        "Gets/sets any tooltip related data.",
                        "The 'context' can be used for storing any information that is necessary",
                        "to access when working with the tooltip."
                    ]
                }
            },
            "id": {
                "comment": {
                    "text": [
                        "```typescript",
                        "let tooltipId = this.tooltip.id;",
                        "```"
                    ],
                    "shortText": [
                        "Identifier for the tooltip.",
                        "If this is property is not explicitly set, it will be automatically generated."
                    ]
                }
            },
            "onOpened": {
                "comment": {
                    "text": [
                        "```typescript",
                        "onToggleOpened(event) {",
                        "   alert(\"Toggle opened!\");",
                        "}",
                        "```",
                        "```html",
                        "<div",
                        "  igxToggle",
                        "  (onOpened)='onToggleOpened($event)'>",
                        "</div>",
                        "```"
                    ],
                    "shortText": "Emits an event after the toggle container is opened."
                }
            },
            "onOpening": {
                "comment": {
                    "text": [
                        "```typescript",
                        "onToggleOpening(event) {",
                        " alert(\"Toggle opening!\");",
                        "}",
                        "```",
                        "```html",
                        "<div",
                        "  igxToggle",
                        "  (onOpening)='onToggleOpening($event)'>",
                        "</div>",
                        "```"
                    ],
                    "shortText": "Emits an event before the toggle container is opened."
                }
            },
            "onClosed": {
                "comment": {
                    "text": [
                        "```typescript",
                        "onToggleClosed(event) {",
                        " alert(\"Toggle closed!\");",
                        "}",
                        "```",
                        "```html",
                        "<div",
                        "  igxToggle",
                        "  (onClosed)='onToggleClosed($event)'>",
                        "</div>",
                        "```"
                    ],
                    "shortText": "Emits an event after the toggle container is closed."
                }
            },
            "onClosing": {
                "comment": {
                    "text": [
                        "```typescript",
                        "onToggleClosing(event) {",
                        " alert(\"Toggle closing!\");",
                        "}",
                        "```",
                        "```html",
                        "<div",
                        " igxToggle",
                        " (onClosing)='onToggleClosing($event)'>",
                        "</div>",
                        "```"
                    ],
                    "shortText": "Emits an event before the toggle container is closed."
                }
            }
        },
        "methods": {
            "open": {
                "comment": {
                    "text": [
                        "```typescript",
                        "this.myToggle.open();",
                        "```"
                    ],
                    "shortText": "Opens the toggle."
                }
            },
            "close": {
                "comment": {
                    "text": [
                        "```typescript",
                        "this.myToggle.close();",
                        "```"
                    ],
                    "shortText": "Closes the toggle."
                }
            },
            "toggle": {
                "comment": {
                    "text": [
                        "```typescript",
                        "this.myToggle.toggle();",
                        "```"
                    ],
                    "shortText": "Opens or closes the toggle, depending on its current state."
                }
            },
            "reposition": {
                "comment": {
                    "shortText": [
                        "Repositions the toggle.",
                        "```typescript",
                        "this.myToggle.reposition();",
                        "```"
                    ]
                }
            }
        },
        "accessors": {
            "role": {
                "getter": {
                    "comment": {
                        "text": [
                            "```typescript",
                            "let tooltipRole = this.tooltip.role;",
                            "```"
                        ],
                        "shortText": "Get the role attribute of the tooltip."
                    }
                }
            }
        }
    }
}