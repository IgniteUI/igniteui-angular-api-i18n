{
    "IgxSliderComponent": {
        "comment": {
            "text": [
                "Ignite UI Slider を使用すると、つまみをトラックで移動して指定した範囲内で値選択を許可します。",
                "トラックを連続またはステップに定義でき、単一または範囲によってスライダーのタイプを選択できます。",
                "例:",
                "```html",
                "<igx-slider id=\"slider\"",
                "           [minValue]=\"0\" [maxValue]=\"100\"",
                "           [continuous]=true [(ngModel)]=\"volume\">",
                "</igx-slider>",
                "```"
            ],
            "shortText": [
                "**Ignite UI for Angular Slider** -",
                "[ヘルプ](https://jp.infragistics.com/products/ignite-ui-angular/angular/components/slider.html)"
            ]
        },
        "properties": {
            "id": {
                "comment": {
                    "shortText": [
                        "`id` 属性の値を設定する @Input プロパティ。",
                        "提供されていない場合、自動的に生成されます。",
                        "```html",
                        "<igx-slider [id]=\"'igx-slider-32'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">",
                        "```"
                    ]
                }
            },
            "thumbLabelVisibilityDuration": {
                "comment": {
                    "shortText": [
                        "An @Input property that sets the duration visibility of thumbs labels. The default value is 750 milliseconds.",
                        "```html",
                        "<igx-slider #slider [thumbLabelVisibilityDuration]=\"3000\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">",
                        "```"
                    ]
                }
            },
            "onValueChange": {
                "comment": {
                    "shortText": [
                        "This event is emitted when user has stopped interacting the thumb and value is changed.",
                        "```typescript",
                        "public change(event){",
                        "   alert(\"The value has been changed!\");",
                        "}",
                        "```",
                        "```html",
                        "<igx-slider (onValueChange)=\"change($event)\" #slider [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">",
                        "```"
                    ]
                }
            }
        },
        "methods": {},
        "accessors": {
            "type": {
                "getter": {
                    "comment": {
                        "shortText": [
                            "An @Input property that gets the type of the `IgxSliderComponent`. The slider can be SliderType.SLIDER(default) or SliderType.RANGE.",
                            "```typescript",
                            "@ViewChild(\"slider2\")",
                            "public slider: IgxSliderComponent;",
                            "ngAfterViewInit(){",
                            "    let type = this.slider.type;",
                            "}"
                        ]
                    }
                },
                "setter": {
                    "comment": {
                        "shortText": [
                            "An @Input property that sets the type of the `IgxSliderComponent`. The slider can be SliderType.SLIDER(default) or SliderType.RANGE.",
                            "```typescript",
                            "sliderType: SliderType = SliderType.RANGE;",
                            "```",
                            "```html",
                            "<igx-slider #slider2 [type]=\"sliderType\" [(ngModel)]=\"rangeValue\" [minValue]=\"0\" [maxValue]=\"100\">",
                            "```"
                        ]
                    }
                }
            },
            "labels": {
                "getter": {
                    "comment": {
                        "shortText": [
                            "Enables `labelView`, by accepting a collection of primitive values with more than one element.",
                            "Each element will be equally spread over the slider and it will serve as a thumb label.",
                            "Once the property is set, it will precendence over {@link maxValue}, {@link minValue}, {@link step}.",
                            "This means that the manipulation for those properties won't be allowed."
                        ]
                    }
                },
                "setter": {
                    "comment": {
                        "shortText": [
                            "Enables `labelView`, by accepting a collection of primitive values with more than one element.",
                            "Each element will be equally spread over the slider and it will serve as a thumb label.",
                            "Once the property is set, it will precendence over {@link maxValue}, {@link minValue}, {@link step}.",
                            "This means that the manipulation for those properties won't be allowed."
                        ]
                    }
                }
            },
            "context": {
                "getter": {
                    "comment": {
                        "text": [
                            "return {",
                            " $implicit: {@link value},",
                            " labels: {@link labels}",
                            "}",
                            "```"
                        ],
                        "shortText": [
                            "Returns the template context corresponding",
                            "to {@link IgxThumbFromTemplateDirective} and {@link IgxThumbToTemplateDirective} templates."
                        ]
                    }
                }
            },
            "step": {
                "setter": {
                "comment": {
                    "shortText": [
                        "つまみドラッグ時の値を増加/減少する段階を設定する @Input プロパティ。",
                        "デフォルトの段階は 1 です。段階を 0 以下に設定しないでください。",
                        "```html",
                        "<igx-slider #slider [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">",
                        "```"
                    ]
                }
            },
            "getter": {
                "comment": {
                    "shortText": [
                        "Returns the incremental/decremental dragging step of the {@link IgxSliderComponent}.",
                        "```typescript",
                        "@ViewChild(\"slider2\")",
                        "public slider: IgxSliderComponent;",
                        "ngAfterViewInit(){",
                        "    let step = this.slider.step;",
                        "}",
                        "```"
                    ]
                }
            }
        },
        "disabled": {
            "getter": {
                "comment": {
                    "shortText": [
                        "Returns if the {@link IgxSliderComponent} is disabled.",
                        "```typescript",
                        "@ViewChild(\"slider2\")",
                        "public slider: IgxSliderComponent;",
                        "ngAfterViewInit(){",
                        "    let isDisabled = this.slider.disabled;",
                        "}",
                        "```"
                    ]
                }
            },
            "setter": {
                "comment": {
                    "shortText": [
                        "An @Input property that disables or enables UI interaction.",
                        "```html",
                        "<igx-slider #slider [disabled]=\"'true'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">",
                        "```"
                    ]
                }
            }
        },
        "continuous": {
            "getter": {
                "comment": {
                    "shortText": [
                        "Returns if the {@link IgxSliderComponent} is set as continuous.",
                        "```typescript",
                        "@ViewChild(\"slider2\")",
                        "public slider: IgxSliderComponent;",
                        "ngAfterViewInit(){",
                        "    let continuous = this.slider.continuous;",
                        "}",
                        "```"
                    ]
                }
            },
            "setter": {
                "comment": {
                    "shortText": [
                        "An @Input property that marks the {@link IgxSliderComponent} as continuous.",
                        "By default is considered that the {@link IgxSliderComponent} is discrete.",
                        "Discrete {@link IgxSliderComponent} does not have ticks and does not shows bubble labels for values.",
                        "```html",
                        "<igx-slider #slider [continuous]=\"'true'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">",
                        "```"
                    ]
                }
            }
        },
        "maxValue": {
            "getter": {
                "comment": {
                    "shortText": [
                        "Returns the maximum value for the {@link IgxSliderComponent}.",
                        "```typescript",
                        "@ViewChild(\"slider\")",
                        "public slider: IgxSliderComponent;",
                        "ngAfterViewInit(){",
                        "   let sliderMax = this.slider.maxValue;",
                        "}",
                        "```"
                    ]
                }
            },
                "setter": {
                    "comment": {
                        "shortText": [
                            "`IgxSliderComponent` の最大値を設定します。",
                            "デフォルトの最大値は 100 です。",
                            "```html",
                            "<igx-slider [type]=\"sliderType\" [minValue]=\"56\" [maxValue]=\"256\">",
                            "```"
                        ]
                    }
                }
            },
            "minValue": {
                "getter": {
                    "comment": {
                        "shortText": [
                            "`IgxSliderComponent` の最小値を返します。",
                            "```typescript",
                            "@ViewChild(\"slider2\")",
                            "public slider: IgxSliderComponent;",
                            "ngAfterViewInit(){",
                            "   let sliderMin = this.slider.minValue;",
                            "}",
                            "```"
                        ]
                    }
                },
                "setter": {
                    "comment": {
                        "shortText": [
                            "`IgxSliderComponent` の最小値を設定します。",
                            "デフォルトの最小値は 0 です。",
                            "```html",
                            "<igx-slider [type]=\"sliderType\" [minValue]=\"56\" [maxValue]=\"100\">",
                            "```"
                        ]
                    }
                }
            },
            "lowerBound": {
                "getter": {
                    "comment": {
                        "shortText": [
                            "`IgxSliderComponent` の下限を返します。",
                            "```typescript",
                            "@ViewChild(\"slider\")",
                            "public slider: IgxSliderComponent;",
                            "ngAfterViewInit(){",
                            "   let sliderLowBound = this.slider.lowerBound;",
                            "}",
                            "```"
                        ]
                    }
                },
                "setter": {
                    "comment": {
                        "shortText": [
                            "`IgxSliderComponent` の下限を設定します。",
                            "設定しない場合は、最小値と同じです。",
                            "```html",
                            "<igx-slider [step]=\"5\" [lowerBound]=\"20\">",
                            "```"
                        ]
                    }
                }
            },
            "upperBound": {
                "getter": {
                    "comment": {
                        "shortText": [
                            "`IgxSliderComponent` の上限を返します。",
                            "```typescript",
                            "@ViewChild(\"slider\")",
                            "public slider: IgxSliderComponent;",
                            "ngAfterViewInit(){",
                            "   let sliderUpBound = this.slider.upperBound;",
                            "}",
                            "```"
                        ]
                    }
                },
                "setter": {
                    "comment": {
                        "shortText": [
                            "`IgxSliderComponent` の上限を設定します。",
                            "設定しない場合は、最大値と同じです。",
                            "```html",
                            "<igx-slider [step]=\"5\" [upperBound]=\"20\">",
                            "```"
                        ]
                    }
                }
            },
            "value": {
                "getter": {
                    "comment": {
                        "shortText": [
                            "Returns the slider value. If the slider is of type {@link SliderType.SLIDER} the returned value is number.",
                            "If the slider type is {@link SliderType.RANGE} the returned value represents an object of {@link lowerValue} and {@link upperValue}.",
                            "```typescript",
                            "@ViewChild(\"slider2\")",
                            "public slider: IgxSliderComponent;",
                            "public sliderValue(event){",
                            "   let sliderVal = this.slider.value;",
                            "}",
                            "```"
                        ]
                    }
                },
                "setter": {
                    "comment": {
                        "shortText": [
                            "Sets the slider value.",
                            "If the slider is of type {@link SliderType.SLIDER} the argument is number. By default the {@link value} gets the {@link lowerBound}.",
                            "If the slider type is {@link SliderType.RANGE} the argument",
                            "represents an object of {@link lowerValue} and {@link upperValue} properties.",
                            "By default the object is associated with the {@link lowerBound} and {@link upperBound} property values.",
                            "```typescript",
                            "rangeValue = {",
                            "  lower: 30,",
                            "  upper: 60",
                            "};",
                            "```",
                            "```html",
                            "<igx-slider [type]=\"sliderType\" [(ngModel)]=\"rangeValue\" [minValue]=\"56\" [maxValue]=\"256\">",
                            "```"
                        ]
                    }
                }
            },
            "isRange": {
                "getter": {
                    "comment": {
                        "shortText": [
                            "Returns whether the `IgxSliderComponent` type is RANGE.",
                            "```typescript",
                            "@ViewChild(\"slider\")",
                            "public slider: IgxSliderComponent;",
                            "ngAfterViewInit(){",
                            "   let sliderRange = this.slider.isRange;",
                            "}",
                            "```"
                        ]
                    }
                }
            },
            "lowerValue": {
                "getter": {
                    "comment": {
                        "shortText": [
                            "`IgxSliderComponent` の下値を返します。",
                            "```typescript",
                            "@ViewChild(\"slider\")",
                            "public slider: IgxSliderComponent;",
                            "public lowValue(event){",
                            "   let sliderLowValue = this.slider.lowerValue;",
                            "}",
                            "```"
                        ]
                    }
                },
                "setter": {
                    "comment": {
                        "shortText": [
                            "`IgxSliderComponent` の下値を設定します。",
                            "```typescript",
                            "@ViewChild(\"slider2\")",
                            "public slider: IgxSliderComponent;",
                            "public lowValue(event){",
                            "   this.slider.lowerValue = 120;",
                            "}",
                            "```"
                        ]
                    }
                }
            },
            "upperValue": {
                "getter": {
                    "comment": {
                        "shortText": [
                            "`IgxSliderComponent` の上値を返します。",
                            "```typescript",
                            "@ViewChild(\"slider2\")",
                            "public slider: IgxSliderComponent;",
                            "public upperValue(event){",
                            "   let upperValue = this.slider.upperValue;",
                            "}",
                            "```"
                        ]
                    }
                },
                "setter": {
                    "comment": {
                        "shortText": [
                            "`IgxSliderComponent` の上値を設定します。",
                            "```typescript",
                            "@ViewChild(\"slider2\")",
                            "public slider: IgxSliderComponent;",
                            "public upperValue(event){",
                            "   this.slider.upperValue = 120;",
                            "}",
                            "```"
                        ]
                    }
                }
            },
            "lowerLabel": {
                "getter": {
                    "comment": {
                        "shortText": [
                            "Returns the value corresponding the lower label.",
                            "```typescript",
                            "@ViewChild(\"slider\")",
                            "public slider: IgxSliderComponent;",
                            "let label = this.slider.lowerLabel;",
                            "```"
                        ]
                    }
                }
            },
            "upperLabel": {
                "getter": {
                    "comment": {
                        "shortText": [
                            "Returns the value corresponding the upper label.",
                            "```typescript",
                            "@ViewChild(\"slider\")",
                            "public slider: IgxSliderComponent;",
                            "let label = this.slider.upperLabel;",
                            "```"
                        ]
                    }
                }
            },
            "labelsViewEnabled": {
                "getter": {
                    "comment": {
                        "shortText": [
                            "Returns if label view is enabled.",
                            "If the {@link labels} is set, the view is automatically activated.",
                            "```typescript",
                            "@ViewChild(\"slider\")",
                            "public slider: IgxSliderComponent;",
                            "let labelView = this.slider.labelsViewEnabled;",
                            "```"
                        ]
                    }
                }
            }
        }
    }
}
