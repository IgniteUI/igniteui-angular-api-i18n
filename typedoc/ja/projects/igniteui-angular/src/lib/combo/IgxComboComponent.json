{
    "IgxComboComponent": {
        "comment": {
            "tags": {
                "igxmodule": {
                    "comment": {
                        "text": "IgxComboModule",
                        "tagName": "igxmodule"
                    }
                },
                "igxtheme": {
                    "comment": {
                        "text": "igx-combo-theme",
                        "tagName": "igxtheme"
                    }
                },
                "igxkeywords": {
                    "comment": {
                        "text": "combobox, combo selection",
                        "tagName": "igxkeywords"
                    }
                },
                "igxgroup": {
                    "comment": {
                        "text": "Grids & Lists",
                        "tagName": "igxgroup"
                    }
                },
                "remarks": {
                    "comment": {
                        "text": [
                            "項目をフィルターする機能、および提供されたデータで単一または複数の選択を実行する機能を提供します。",
                            "また、キーボード ナビゲーションおよびカスタム スタイル設定機能を公開します。"
                        ],
                        "tagName": "備考:"
                    }
                },
                "example": {
                    "comment": {
                        "text": [
                            "```html",
                            "<igx-combo [itemsMaxHeight]=\"250\" [data]=\"locationData\"",
                            " [displayKey]=\"'field'\" [valueKey]=\"'field'\"",
                            " placeholder=\"Location(s)\" searchPlaceholder=\"Search...\">",
                            "</igx-combo>",
                            "```"
                        ],
                        "tagName": "例:"
                    }
                }
            },
            "shortText": "編集可能な機能を提供するドロップダウン リストを表します。ユーザーは定義済みのリストからオプションを選択できます。"
        },
        "properties": {
            "autoFocusSearch": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "`opened` イベントが呼び出された後にコンボの検索ボックスにフォーカスするかどうかを制御する",
                        "@Inputプロパティ。",
                        "`false` の場合、代わりにコンボのリスト項目コンテナーがフォーカスされます。"
                    ]
                }
            },
            "filterable": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "リストでフィルタリングを有効/無効にする @Input プロパティ。デフォルトは `true` です。",
                        "```html",
                        "<igx-combo [filterable]=\"false\">",
                        "```"
                    ]
                }
            },
            "searchPlaceholder": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```typescript",
                        "// 取得",
                        "let myComboSearchPlaceholder = this.combo.searchPlaceholder;",
                        "```",
                        "```html",
                       "<!--設定-->",
                        "<igx-combo [searchPlaceholder]='newPlaceHolder'></igx-combo>",
                        "```"
                    ],
                    "shortText": "コンボ ドロップダウンの検索フィールドのプレースホルダー値を定義します。"
                }
            },
            "selectionChanging": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```html",
                        "<igx-combo (selectionChanging)='handleSelection()'></igx-combo>",
                        "```"
                    ],
                    "shortText": "選択を完了する前にアイテム選択が変更されるときに発生します。"
                }
            },
            "showSearchCaseIcon": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```typescript",
                        "// 取得",
                        "let myComboShowSearchCaseIcon = this.combo.showSearchCaseIcon;",
                        "```",
                        "```html",
                       "<!--設定-->",
                        "<igx-combo [showSearchCaseIcon]='true'></igx-combo>",
                        "```"
                    ],
                    "shortText": "caseSensitive アイコンを検索入力に表示するかどうかを定義します。"
                }
            },
            "overlaySettings": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```typescript",
                        " const customSettings = { positionStrategy: { settings: { target: myTarget } } };",
                        " combo.overlaySettings = customSettings;",
                        "```",
                        "コンボで使用されるカスタム オーバーレイ設定を取得します。",
                        "```typescript",
                        " const comboOverlaySettings: OverlaySettings = myCombo.overlaySettings;",
                        "```"
                    ],
                    "shortText": [
                        "コンボの項目リストの表示方法を制御するカスタム オーバーレイ設定を設定します。",
                        "Set:",
                        "```html",
                        "<igx-combo [overlaySettings] = \"customOverlaySettings\"></igx-combo>",
                        "```"
                    ]
                }
            },
            "id": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```typescript",
                        "// 取得",
                        "let id = this.combo.id;",
                        "```",
                        "```html",
                       "<!--設定-->",
                        "<igx-combo [id]='combo1'></igx-combo>",
                        "```"
                    ],
                    "shortText": "コンボの id を取得または設定します。"
                }
            },
            "width": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```typescript",
                        "// 取得",
                        "let myComboWidth = this.combo.width;",
                        "```",
                        "```html",
                       "<!--設定-->",
                        "<igx-combo [width]='250px'></igx-combo>",
                        "```"
                    ],
                    "shortText": "要素のスタイルの幅を設定します。"
                }
            },
            "allowCustomValues": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```typescript",
                        "// 取得",
                        "let comboAllowsCustomValues = this.combo.allowCustomValues;",
                        "```",
                        "```html",
                       "<!--設定-->",
                        "<igx-combo [allowCustomValues]='true'></igx-combo>",
                        "```"
                    ],
                    "shortText": "カスタム値をコレクションに追加できるかどうかを制御します。"
                }
            },
            "itemsWidth": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```typescript",
                        "// 取得",
                        "let myComboItemsWidth = this.combo.itemsWidth;",
                        "```",
                        "```html",
                       "<!--設定-->",
                        "<igx-combo [itemsWidth] = '\"180px\"'></igx-combo>",
                        "```"
                    ],
                    "shortText": "ドロップダウン リストの幅を構成します。"
                }
            },
            "placeholder": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```typescript",
                        "// 取得",
                        "let myComboPlaceholder = this.combo.placeholder;",
                        "```",
                        "```html",
                       "<!--設定-->",
                        "<igx-combo [placeholder]='newPlaceHolder'></igx-combo>",
                        "```"
                    ],
                    "shortText": "コンボの値フィールドのプレースホルダー値を定義します。"
                }
            },
            "valueKey": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```typescript",
                        "// 取得",
                        "let myComboValueKey = this.combo.valueKey;",
                        "```",
                        "```html",
                       "<!--設定-->",
                        "<igx-combo [valueKey]='myKey'></igx-combo>",
                        "```"
                    ],
                    "shortText": "値を決定するためにデータ ソースのどの列を使用するかを決定します。"
                }
            },
            "ariaLabelledBy": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "aria-labelledby 属性を設定する @Input プロパティ。",
                        "```html",
                        "<igx-combo [ariaLabelledBy]=\"'label1'\">",
                        "```"
                    ]
                }
            },
            "disabled": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "コンボを有効/無効にする @Input プロパティ。デフォルトは `false` です。",
                        "```html",
                        "<igx-combo [disabled]=\"'true'\">",
                        "```"
                    ]
                }
            },
            "opening": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```html",
                        "<igx-combo opening='handleOpening($event)'></igx-combo>",
                        "```"
                    ],
                    "shortText": "ドロップダウンが開く前に発生します。"
                }
            },
            "opened": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```html",
                        "<igx-combo (opened)='handleOpened($event)'></igx-combo>",
                        "```"
                    ],
                    "shortText": "ドロップダウンが開いた後に発生します。"
                }
            },
            "closing": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```html",
                        "<igx-combo (closing)='handleClosing($event)'></igx-combo>",
                        "```"
                    ],
                    "shortText": "ドロップダウンが閉じる前に発生します。"
                }
            },
            "closed": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```html",
                        "<igx-combo (closed)='handleClosed($event)'></igx-combo>",
                        "```"
                    ],
                    "shortText": "ドロップダウンが閉じられた後に発生します。"
                }
            },
            "addition": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```html",
                        "<igx-combo (addition)='handleAdditionEvent($event)'></igx-combo>",
                        "```"
                    ],
                    "shortText": "項目がデータ コレクションに追加されているときに発生します。"
                }
            },
            "searchInputUpdate": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```html",
                        "<igx-combo (searchInputUpdate)='handleSearchInputEvent($event)'></igx-combo>",
                        "```"
                    ],
                    "shortText": "検索入力の値が変更 (入力、貼り付け、クリアなど) するときに発生します。"
                }
            },
            "dataPreLoad": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```html",
                        "<igx-combo (dataPreLoad)='handleDataPreloadEvent($event)'></igx-combo>",
                        "```"
                    ],
                    "shortText": "新しいデータの塊が仮想化から読み込まれたときに発生します。"
                }
            },
            "itemTemplate": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```typescript",
                        "// Typescript に設定",
                        "const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;",
                        "myComponent.combo.itemTemplate = myCustomTemplate;",
                        "```",
                        "```html",
                        "<!-- Markup に設定 -->",
                        " <igx-combo #combo>",
                        "     ...",
                        "     <ng-template igxComboItem>",
                        "         <div class=\"custom-item\" let-item let-key=\"valueKey\">",
                        "             <div class=\"custom-item__name\">{{ item[key] }}</div>",
                        "             <div class=\"custom-item__cost\">{{ item.cost }}</div>",
                        "         </div>",
                        "     </ng-template>",
                        " </igx-combo>",
                        "```"
                    ],
                    "shortText": "カスタム テンプレートがある場合は、コンボ リストの ITEMS の描画に使用されます。"
                }
            },
            "headerTemplate": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```typescript",
                        "// Typescript に設定",
                        "const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;",
                        "myComponent.combo.headerTemplate = myCustomTemplate;",
                        "```",
                        "```html",
                        "<!-- Markup に設定 -->",
                        " <igx-combo #combo>",
                        "     ...",
                        "     <ng-template igxComboHeader>",
                        "         <div class=\"combo__header\">",
                        "             This is a custom header",
                        "         </div>",
                        "     </ng-template>",
                        " </igx-combo>",
                        "```"
                    ],
                    "shortText": "カスタム テンプレートがある場合は、コンボ項目リストのための HEADER の描画に使用されます。"
                }
            },
            "footerTemplate": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```typescript",
                        "// Typescript に設定",
                        "const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;",
                        "myComponent.combo.footerTemplate = myCustomTemplate;",
                        "```",
                        "```html",
                        "<!-- Markup に設定 -->",
                        " <igx-combo #combo>",
                        "     ...",
                        "     <ng-template igxComboFooter>",
                        "         <div class=\"combo__footer\">",
                        "             This is a custom footer",
                        "         </div>",
                        "     </ng-template>",
                        " </igx-combo>",
                        "```"
                    ],
                    "shortText": "カスタム テンプレートがある場合は、コンボ項目リストのための FOOTER の描画に使用されます"
                }
            },
            "headerItemTemplate": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```typescript",
                        "// Typescript に設定",
                        "const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;",
                        "myComponent.combo.headerItemTemplate = myCustomTemplate;",
                        "```",
                        "```html",
                        "<!-- Markup に設定 -->",
                        " <igx-combo #combo>",
                        "     ...",
                        "     <ng-template igxComboHeaderItem let-item let-key=\"groupKey\">",
                        "         <div class=\"custom-item--group\">Group header for {{ item[key] }}</div>",
                        "     </ng-template>",
                        " </igx-combo>",
                        "```"
                    ],
                    "shortText": "カスタム テンプレートがある場合は、コンボ リスト内のグループのため HEADER ITEMS の描画に使用されます。"
                }
            },
            "addItemTemplate": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```typescript",
                        "// Typescript に設定",
                        "const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;",
                        "myComponent.combo.addItemTemplate = myCustomTemplate;",
                        "```",
                        "```html",
                        "<!-- Markup に設定 -->",
                        " <igx-combo #combo>",
                        "     ...",
                        "     <ng-template igxComboAddItem>",
                        "         <button class=\"combo__add-button\">",
                        "             Click to add item",
                        "         </button>",
                        "     </ng-template>",
                        " </igx-combo>",
                        "```"
                    ],
                    "shortText": "カスタム テンプレートがある場合は、コンボ ドロップダウンの ADD BUTTON の描画に使用されます。"
                }
            },
            "emptyTemplate": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```typescript",
                        "// Typescript に設定",
                        "const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;",
                        "myComponent.combo.emptyTemplate = myCustomTemplate;",
                        "```",
                        "```html",
                        "<!-- Markup に設定 -->",
                        " <igx-combo #combo>",
                        "     ...",
                        "     <ng-template igxComboEmpty>",
                        "         <div class=\"combo--empty\">",
                        "             表示する項目はありません",
                        "         </div>",
                        "     </ng-template>",
                        " </igx-combo>",
                        "```"
                    ],
                    "shortText": "カスタム テンプレートがある場合は、コンボ ドロップダウンの ADD BUTTON の描画に使用されます。"
                }
            },
            "toggleIconTemplate": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```typescript",
                        "// Typescript に設定",
                        "const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;",
                        "myComponent.combo.toggleIconTemplate = myCustomTemplate;",
                        "```",
                        "```html",
                        "<!-- Markup に設定 -->",
                        " <igx-combo #combo>",
                        "     ...",
                        "     <ng-template igxComboToggleIcon let-collapsed>",
                        "         <igx-icon>{{ collapsed ? 'remove_circle' : 'remove_circle_outline'}}</igx-icon>",
                        "     </ng-template>",
                        " </igx-combo>",
                        "```"
                    ],
                    "shortText": "カスタム テンプレートがある場合は、コンボ TOGGLE (開く/閉じる) ボタンを描画するために使用されます。"
                }
            },
            "clearIconTemplate": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```typescript",
                        "// Typescript に設定",
                        "const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;",
                        "myComponent.combo.clearIconTemplate = myCustomTemplate;",
                        "```",
                        "```html",
                        "<!-- Markup に設定 -->",
                        " <igx-combo #combo>",
                        "     ...",
                        "     <ng-template igxComboClearIcon>",
                        "         <igx-icon>clear</igx-icon>",
                        "     </ng-template>",
                        " </igx-combo>",
                        "```"
                    ],
                    "shortText": "カスタム テンプレートがある場合は、コンボ CLEAR (開く/閉じる)　ボタンを描画するために使用されます。"
                }
            }
        },
        "methods": {
            "select": {
                "comment": {
                    "parameters": {
                        "newItems": {
                            "comment": {
                                "shortText": "選択される新しい項目。"
                            }
                        },
                        "clearCurrentSelection": {
                            "comment": {
                                "shortText": [
                                    "True の場合、前回選択した項目がクリアされます。",
                                    "```typescript",
                                    "this.combo.select([\"New York\", \"New Jersey\"]);",
                                    "```"
                                ]
                            }
                        }
                    },
                    "tags": {},
                    "shortText": "定義済みの項目を選択します。"
                }
            },
            "deselect": {
                "comment": {
                    "parameters": {
                        "items": {
                            "comment": {
                                "shortText": [
                                    "選択解除される項目。",
                                    "```typescript",
                                    "this.combo.deselect([\"New York\", \"New Jersey\"]);",
                                    "```"
                                ]
                            }
                        }
                    },
                    "tags": {},
                    "shortText": "定義済みの項目の選択を解除します。"
                }
            },
            "selectAllItems": {
                "comment": {
                    "parameters": {
                        "ignoreFilter": {
                            "comment": {
                                "shortText": [
                                    "True に設定されている場合、すべての項目を設定します。そうでない場合、フィルターのみの項目を選択します。",
                                    "```typescript",
                                    "this.combo.selectAllItems();",
                                    "```"
                                ]
                            }
                        }
                    },
                    "tags": {},
                    "shortText": "すべての項目 (フィルター済み) を選択します。"
                }
            },
            "deselectAllItems": {
                "comment": {
                    "parameters": {
                        "ignoreFilter": {
                            "comment": {
                                "shortText": [
                                    "True に設定されている場合、すべての項目の選択を解除します。そうでない場合、フィルターのみの項目を選択解除します。",
                                    "```typescript",
                                    "this.combo.deselectAllItems();",
                                    "```"
                                ]
                            }
                        }
                    },
                    "tags": {},
                    "shortText": "フィルター済みのすべての項目の選択を解除します。"
                }
            },
            "setSelectedItem": {
                "comment": {
                    "parameters": {
                        "itemID": {
                            "comment": {
                                "shortText": "指定される項目の itemID。"
                            }
                        },
                        "select": {
                            "comment": {
                                "shortText": [
                                    "項目が選択されるか (true) または選択解除されるか (false)。",
                                    "指定された valueKey なし;",
                                    "```typescript",
                                    "this.combo.valueKey = null;",
                                    "const items: { field: string, region: string}[] = data;",
                                    "this.combo.setSelectedItem(items[0], true);",
                                    "```",
                                    "指定された valueKey を使用;",
                                    "```typescript",
                                    "this.combo.valueKey = 'field';",
                                    "const items: { field: string, region: string}[] = data;",
                                    "this.combo.setSelectedItem('Connecticut', true);",
                                    "```"
                                ]
                            }
                        }
                    },
                    "tags": {},
                    "shortText": "1 つの項目を選択/選択解除します。"
                }
            },
            "toggle": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```html",
                        "<button (click)=\"combo.toggle()\">Toggle Combo</button>",
                        "<igx-combo #combo></igx-combo>",
                        "```"
                    ],
                    "shortText": "コンボを開く/閉じるメソッド。"
                }
            },
            "open": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```html",
                        "<button (click)=\"combo.open()\">Open Combo</button>",
                        "<igx-combo #combo></igx-combo>",
                        "```"
                    ],
                    "shortText": "コンボを開くメソッド。"
                }
            },
            "close": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```html",
                        "<button (click)=\"combo.close()\">Close Combo</button>",
                        "<igx-combo #combo></igx-combo>",
                        "```"
                    ],
                    "shortText": "コンボを閉じるメソッド。"
                }
            },
            "triggerCheck": {
                "comment": {
                    "tags": {},
                    "shortText": "コンボ ビューに変更検出をトリガーします。"
                }
            }
        },
        "accessors": {
            "itemsMaxHeight": {
                "getter": {
                    "comment": {
                        "tags": {},
                        "text": [
                            "```typescript",
                            "// 取得",
                            "let myComboItemsMaxHeight = this.combo.itemsMaxHeight;",
                            "```",
                            "```html",
                           "<!--設定-->",
                            "<igx-combo [itemsMaxHeight]='320'></igx-combo>",
                            "```"
                        ],
                        "shortText": "ドロップダウン リストの高さを構成します。"
                    }
                },
                "setter": {
                    "comment": {
                        "tags": {},
                        "text": [
                            "```typescript",
                            "// 取得",
                            "let myComboItemsMaxHeight = this.combo.itemsMaxHeight;",
                            "```",
                            "```html",
                           "<!--設定-->",
                            "<igx-combo [itemsMaxHeight]='320'></igx-combo>",
                            "```"
                        ],
                        "shortText": "ドロップダウン リストの高さを構成します。"
                    }
                }
            },
            "itemHeight": {
                "getter": {
                    "comment": {
                        "tags": {},
                        "text": [
                            "```typescript",
                            "// 取得",
                            "let myComboItemHeight = this.combo.itemHeight;",
                            "```",
                            "```html",
                           "<!--設定-->",
                            "<igx-combo [itemHeight]='32'></igx-combo>",
                            "```"
                        ],
                        "shortText": "ドロップダウン リスト項目の高さを構成します。"
                    }
                },
                "setter": {
                    "comment": {
                        "tags": {},
                        "text": [
                            "```typescript",
                            "// 取得",
                            "let myComboItemHeight = this.combo.itemHeight;",
                            "```",
                            "```html",
                           "<!--設定-->",
                            "<igx-combo [itemHeight]='32'></igx-combo>",
                            "```"
                        ],
                        "shortText": "ドロップダウン リスト項目の高さを構成します。"
                    }
                }
            },
            "data": {
                "getter": {
                    "comment": {
                        "tags": {},
                        "text": [
                            "```html",
                           "<!--設定-->",
                            "<igx-combo [data]='items'></igx-combo>",
                            "```"
                        ],
                        "shortText": "コンボのデータ ソース。"
                    }
                },
                "setter": {
                    "comment": {
                        "tags": {},
                        "text": [
                            "```html",
                           "<!--設定-->",
                            "<igx-combo [data]='items'></igx-combo>",
                            "```"
                        ],
                        "shortText": "コンボのデータ ソース。"
                    }
                }
            },
            "displayKey": {
                "getter": {
                    "comment": {
                        "tags": {},
                        "text": [
                            "```typescript",
                            "// 取得",
                            "let myComboDisplayKey = this.combo.displayKey;",
                            "// 設定",
                            "this.combo.displayKey = 'val';",
                            "```",
                            "```html",
                           "<!--設定-->",
                            "<igx-combo [displayKey]='myDisplayKey'></igx-combo>",
                            "```"
                        ],
                        "shortText": "表示値を決定するためにデータ ソースのどの列を使用するかを決定します。"
                    }
                }
            },
            "groupKey": {
                "getter": {
                    "comment": {
                        "tags": {},
                        "text": [
                            "```typescript",
                            "// 取得",
                            "let currentGroupKey = this.combo.groupKey;",
                            "```"
                        ],
                        "shortText": "項目リストで項目をグループ化する項目プロパティ。データが Object[] 型ではない場合に利用できません。"
                    }
                },
                "setter": {
                    "comment": {
                        "tags": {},
                        "text": [
                            "```html",
                           "<!--設定-->",
                            "<igx-combo [groupKey]='newGroupKey'></igx-combo>",
                            "```"
                        ],
                        "shortText": "項目リストで項目をグループ化する項目プロパティ。データが Object[] 型ではない場合に利用できません。"
                    }
                }
            },
            "groupSortingDirection": {
                "getter": {
                    "comment": {
                        "tags": {
                            "example": {
                                "comment": {
                                    "text": [
                                        "```html",
                                        "<igx-combo [groupSortingDirection]=\"groupSortingDirection\"></igx-combo>",
                                        "```",
                                        "```typescript",
                                        "public groupSortingDirection = SortingDirection.Asc;",
                                        "```"
                                    ],
                                    "tagName": "例:"
                                }
                            }
                        },
                        "shortText": "グループのソート順序を設定する @Input プロパティ。"
                    }
                },
                "setter": {
                    "comment": {
                        "tags": {
                            "example": {
                                "comment": {
                                    "text": [
                                        "```html",
                                        "<igx-combo [groupSortingDirection]=\"groupSortingDirection\"></igx-combo>",
                                        "```",
                                        "```typescript",
                                        "public groupSortingDirection = SortingDirection.Asc;",
                                        "```"
                                    ],
                                    "tagName": "例:"
                                }
                            }
                        },
                        "shortText": "An @Input property that sets groups sorting order."
                    }
                }
            },
            "type": {
                "getter": {
                    "comment": {
                        "tags": {},
                        "shortText": [
                            "コンボのスタイルを設定する @Input プロパティ。",
                            "有効な値は `line`、`box`、`border`、`search` です。デフォルトは `box` です。",
                            "```html",
                            "<igx-combo [type]=\"'line'\">",
                            "```"
                        ]
                    }
                },
                "setter": {
                    "comment": {
                        "tags": {},
                        "shortText": [
                            "コンボのスタイルを設定する @Input プロパティ。",
                            "有効な値は `line`、`box`、`border`、`search` です。デフォルトは `box` です。",
                            "```html",
                            "<igx-combo [type]=\"'line'\">",
                            "```"
                        ]
                    }
                }
            },
            "valid": {
                "getter": {
                    "comment": {
                        "tags": {},
                        "text": [
                            "```typescript",
                            "// 取得",
                            "let valid = this.combo.valid;",
                            "```"
                        ],
                        "shortText": "フォームで使用時のコントロールが有効化どうかを取得します。"
                    }
                },
                "setter": {
                    "comment": {
                        "tags": {},
                        "text": [
                            "```typescript",
                            "// 設定",
                            "this.combo.valid = IgxComboState.INVALID;",
                            "```"
                        ],
                        "shortText": "フォームで使用時のコントロールが有効化どうかを設定します。"
                    }
                }
            },
            "value": {
                "getter": {
                    "comment": {
                        "tags": {},
                        "text": [
                            "```typescript",
                            "// 取得",
                            "let comboValue = this.combo.value;",
                            "```"
                        ],
                        "shortText": "コンボ入力に表示するテキスト。"
                    }
                }
            },
            "virtualizationState": {
                "getter": {
                    "comment": {
                        "tags": {},
                        "text": [
                            "```typescript",
                            "// 取得",
                            "let state = this.combo.virtualizationState;",
                            "```"
                        ],
                        "shortText": "仮想化データの現在の状態を定義します。`startIndex` と `chunkSize` を含みます。"
                    }
                },
                "setter": {
                    "comment": {
                        "tags": {},
                        "text": [
                            "```typescript",
                            "// 設定",
                            "this.combo.virtualizationState(state);",
                            "```"
                        ],
                        "shortText": "仮想化データの現在の状態を設定します。"
                    }
                }
            },
            "collapsed": {
                "getter": {
                    "comment": {
                        "tags": {},
                        "text": [
                            "```typescript",
                            "let state = this.combo.collapsed;",
                            "```"
                        ],
                        "shortText": "ドロップダウン状態を取得します。"
                    }
                }
            },
            "totalItemCount": {
                "getter": {
                    "comment": {
                        "tags": {},
                        "text": [
                            "```typescript",
                            "// 取得",
                            "let count = this.combo.totalItemCount;",
                            "```"
                        ],
                        "shortText": "リモート サービスを使用する場合、仮想データ項目の合計数を取得します。"
                    }
                },
                "setter": {
                    "comment": {
                        "tags": {},
                        "text": [
                            "```typescript",
                            "// 設定",
                            "this.combo.totalItemCount(remoteService.count);",
                            "```"
                        ],
                        "shortText": "リモート サービスを使用する場合、仮想データ項目の合計数を設定します。"
                    }
                }
            },
            "selection": {
                "getter": {
                    "comment": {
                        "returns": "選択された項目の配列\n```typescript\nlet mySelection = this.combo.selection;\n```\n",
                        "tags": {},
                        "shortText": "現在の選択状態を取得します。"
                    }
                }
            },
            "displayDensity": {
                "getter": {
                    "comment": {
                        "tags": {},
                        "shortText": [
                            "コンポーネントのテーマを返します。",
                            "デフォルト テーマは `comfortable` です。",
                            "利用可能なオプションは `comfortable`、`cosy`、および `compact` です。",
                            "```typescript",
                            "let componentTheme = this.component.displayDensity;",
                            "```"
                        ]
                    }
                },
                "setter": {
                    "comment": {
                        "tags": {},
                        "shortText": "コンポーネントのテーマを設定します。"
                    }
                }
            }
        }
    }
}