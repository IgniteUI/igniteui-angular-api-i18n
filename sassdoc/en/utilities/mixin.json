{
    "hide-default": {
        "description": [
            "<p>Hides the element from the DOM.</p>",
            ""
        ],
        "example": [
            {
                "description": [
                    "<p>Sample usage</p>",
                    ""
                ],
                "code": [
                    "input[type=\"checkbox\"] {",
                    "  @include hide-default();",
                    "}"
                ]
            }
        ]
    },
    "linear-gradient": {
        "description": [
            "<p>Generates a linear gradient.</p>",
            ""
        ],
        "parameters": {
            "direction": {
                "description": [
                    "<p>The direction of the gradient.</p>",
                    ""
                ]
            },
            "color-stops": {
                "description": [
                    "<p>A list of color stops to be used in the gradient.</p>",
                    ""
                ]
            }
        },
        "example": [
            {
                "description": [
                    "<p>Sample usage</p>",
                    ""
                ],
                "code": [
                    ".bozo {",
                    "  background: @include linear-gradient(\"to right\", red, orange);",
                    "}"
                ]
            }
        ]
    },
    "register-component": {
        "description": [
            "<p>Registers a component to the list of known components.</p>",
            ""
        ],
        "parameters": {
            "name": {
                "description": [
                    "<p>The component name to register.</p>",
                    ""
                ]
            }
        }
    },
    "ellipsis": {
        "description": [
            "<p>Applies text-overflow ellipsis to e text element.",
            "This won&#39;t work on display flex elements.</p>",
            ""
        ]
    },
    "gen-color-class": {
        "description": [
            "<p>Generates a CSS class name for a color from a",
            "given name, variant, prefix and suffix</p>",
            ""
        ],
        "parameters": {
            "name": {
                "description": [
                    "<p>The main class name.</p>",
                    ""
                ]
            },
            "variant": {
                "description": [
                    "<p>An additional string to be attached to the main class name.</p>",
                    ""
                ]
            },
            "prefix": {
                "description": [
                    "<p>A suffix to be attached to the name and variant string.</p>",
                    ""
                ]
            }
        }
    },
    "gen-color-classes": {
        "description": [
            "<p>Generates CSS class names for all colors from",
            "the color palette for a given property, with",
            "optional prefix and suffix attached to the class name.</p>",
            ""
        ],
        "parameters": {
            "prop": {
                "description": [
                    "<p>The CSS property to assign the palette color to.</p>",
                    ""
                ]
            },
            "prefix": {
                "description": [
                    "<p>A prefix to be attached to the class name.</p>",
                    ""
                ]
            },
            "suffix": {
                "description": [
                    "<p>A suffix to be attached to the class name.</p>",
                    ""
                ]
            }
        },
        "example": [
            {
                "description": [
                    "<p>Generate background classes with colors from the palette.</p>",
                    ""
                ],
                "code": [
                    "// Will generate class names like",
                    "// .my-primary-500-bg { ... };",
                    "@include gen-color-classes(",
                    "  $prop: 'background-color',",
                    "  $prefix: 'my', $suffix: 'bg'",
                    ");"
                ]
            }
        ]
    },
    "css-vars-from-palette": {
        "description": [
            "<p>Generates CSS variables for a given palette.</p>",
            ""
        ],
        "parameters": {
            "palette": {
                "description": [
                    "<p>The igx palette to use to generate css variables for.</p>",
                    ""
                ]
            }
        },
        "example": [
            {
                "description": [
                    "<p>Generate css variables for the <code>$default-palette</code>.</p>",
                    ""
                ],
                "code": [
                    "@include css-vars-from-palette($default-palette);"
                ]
            }
        ]
    },
    "igx-palette-vars": {
        "description": [
            "<p>Generates CSS variables for a given palette.</p>",
            ""
        ],
        "parameters": {
            "palette": {
                "description": [
                    "<p>The igx palette to use to generate css variables for.</p>",
                    ""
                ]
            }
        },
        "example": [
            {
                "description": [
                    "<p>Generate css variables for the <code>$default-palette</code>.</p>",
                    ""
                ],
                "code": [
                    "@include css-vars-from-palette($default-palette);"
                ]
            }
        ]
    },
    "igx-color-classes": {
        "description": [
            "<p>Generates CSS class names for all colors from",
            "the color palette for a given property, with",
            "optional prefix and suffix attached to the class name.</p>",
            ""
        ],
        "parameters": {
            "prop": {
                "description": [
                    "<p>The CSS property to assign the palette color to.</p>",
                    ""
                ]
            },
            "prefix": {
                "description": [
                    "<p>A prefix to be attached to the class name.</p>",
                    ""
                ]
            },
            "suffix": {
                "description": [
                    "<p>A suffix to be attached to the class name.</p>",
                    ""
                ]
            }
        },
        "example": [
            {
                "description": [
                    "<p>Generate background classes with colors from the palette.</p>",
                    ""
                ],
                "code": [
                    "// Will generate class names like",
                    "// .igx-primary-500-bg { ... };",
                    "@include igx-color-classes(",
                    "  $prop: 'background-color',",
                    "  $suffix: 'bg'",
                    ");"
                ]
            }
        ]
    },
    "css-vars-from-theme": {
        "description": [
            "<p>Parses a map of key value pairs",
            "from component themes to css variables.</p>",
            ""
        ],
        "parameters": {
            "theme": {
                "description": [
                    "<p>The component theme to be used to generate css variables.</p>",
                    ""
                ]
            }
        },
        "example": [
            {
                "description": [
                    "<p>Convert theme colors to css variables.</p>",
                    ""
                ],
                "code": [
                    "$my-theme: igx-avatar-theme($icon-color: red);",
                    ":root {",
                    "  @include css-vars-from-theme($my-theme);",
                    "}"
                ]
            }
        ]
    },
    "igx-root-css-vars": {
        "description": [
            "<p>Add theme colors to the global root scope",
            "Ensures the operation is done only once.</p>",
            ""
        ],
        "parameters": {
            "theme": {
                "description": [
                    "<p>The component theme to register as css vars.</p>",
                    ""
                ]
            }
        }
    },
    "igx-css-vars": {
        "description": [
            "<p>Add theme colors to a scope.</p>",
            ""
        ],
        "parameters": {
            "theme": {
                "description": [
                    "<p>The component theme to get the</p>",
                    ""
                ]
            }
        }
    },
    "igx-scope": {
        "description": [
            "<p>Scopes CSS rules to a predefined top-level parent selector.",
            "Respects specificity and selector scopes.</p>",
            ""
        ],
        "parameters": {
            "parent": {
                "description": [
                    "<p>The selector to be used as top level scope.</p>",
                    ""
                ]
            }
        },
        "example": [
            {
                "description": [
                    "<p>Apply mixin style rules only when &#39;.igx-typography&#39; selector is present.</p>",
                    ""
                ],
                "code": [
                    "@mixin igx-card-typography {",
                    "   @include igx-scope('.igx-typography') {",
                    "     // style rules...",
                    "   }",
                    "}",
                    "",
                    "// Later",
                    ".my-selector {",
                    "  @include igx-card-typography();",
                    "}",
                    "",
                    "// Generated CSS",
                    "// .igx-typography .my-selector {",
                    "//    ...styles rules as output by igx-card-typography mixin",
                    "// }"
                ]
            }
        ]
    }
}