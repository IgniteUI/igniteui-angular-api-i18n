{
    "IgxGridForOfDirective": {
        "properties": {
            "igxForOf": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "An @Input property that sets the data to be rendered.",
                        "```html",
                        "<ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\"></ng-template>",
                        "```"
                    ]
                }
            },
            "igxForSizePropName": {
                "comment": {
                    "tags": {},
                    "shortText": "An @Input property that sets the property name from which to read the size in the data object."
                }
            },
            "igxForScrollOrientation": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "An @Input property that specifies the scroll orientation.",
                        "Scroll orientation can be \"vertical\" or \"horizontal\".",
                        "```html",
                        "<ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\"></ng-template>",
                        "```"
                    ]
                }
            },
            "igxForScrollContainer": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "Optionally pass the parent `igxFor` instance to create a virtual template scrolling both horizontally and vertically.",
                        "```html",
                        "<ng-template #scrollContainer igxFor let-rowData [igxForOf]=\"data\"",
                        "      [igxForScrollOrientation]=\"'vertical'\"",
                        "      [igxForContainerSize]=\"'500px'\"",
                        "      [igxForItemSize]=\"'50px'\"",
                        "      let-rowIndex=\"index\">",
                        "      <div [style.display]=\"'flex'\" [style.height]=\"'50px'\">",
                        "          <ng-template #childContainer igxFor let-item [igxForOf]=\"data\"",
                        "              [igxForScrollOrientation]=\"'horizontal'\"",
                        "              [igxForScrollContainer]=\"parentVirtDir\"",
                        "              [igxForContainerSize]=\"'500px'\">",
                        "                  <div [style.min-width]=\"'50px'\">{{rowIndex}} : {{item.text}}</div>",
                        "          </ng-template>",
                        "      </div>",
                        "</ng-template>",
                        "```"
                    ]
                }
            },
            "igxForContainerSize": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "An @Input property that sets the px-affixed size of the container along the axis of scrolling.",
                        "For \"horizontal\" orientation this value is the width of the container and for \"vertical\" is the height.",
                        "```html",
                        "<ng-template igxFor let-item [igxForOf]=\"data\" [igxForContainerSize]=\"'500px'\"",
                        "     [igxForScrollOrientation]=\"'horizontal'\">",
                        "</ng-template>",
                        "```"
                    ]
                }
            },
            "igxForItemSize": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "An @Input property that sets the px-affixed size of the item along the axis of scrolling.",
                        "For \"horizontal\" orientation this value is the width of the column and for \"vertical\" is the height or the row.",
                        "```html",
                        "<ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" [igxForItemSize]=\"'50px'\"></ng-template>",
                        "```"
                    ]
                }
            },
            "chunkLoad": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "An event that is emitted after a new chunk has been loaded.",
                        "```html",
                        "<ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (chunkLoad)=\"loadChunk($event)\"></ng-template>",
                        "```",
                        "```typescript",
                        "loadChunk(e){",
                        "alert(\"chunk loaded!\");",
                        "}",
                        "```"
                    ]
                }
            },
            "contentSizeChange": {
                "comment": {
                    "tags": {},
                    "shortText": "An event that is emitted after the rendered content size of the igxForOf has been changed."
                }
            },
            "dataChanged": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "An event that is emitted after data has been changed.",
                        "```html",
                        "<ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (dataChanged)=\"dataChanged($event)\"></ng-template>",
                        "```",
                        "```typescript",
                        "dataChanged(e){",
                        "alert(\"data changed!\");",
                        "}",
                        "```"
                    ]
                }
            },
            "chunkPreload": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "An event that is emitted on chunk loading to emit the current state information - startIndex, endIndex, totalCount.",
                        "Can be used for implementing remote load on demand for the igxFor data.",
                        "```html",
                        "<ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (chunkPreload)=\"chunkPreload($event)\"></ng-template>",
                        "```",
                        "```typescript",
                        "chunkPreload(e){",
                        "alert(\"chunk is loading!\");",
                        "}",
                        "```"
                    ]
                }
            },
            "state": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "The current state of the directive. It contains `startIndex` and `chunkSize`.",
                        "state.startIndex - The index of the item at which the current visible chunk begins.",
                        "state.chunkSize - The number of items the current visible chunk holds.",
                        "These options can be used when implementing remote virtualization as they provide the necessary state information.",
                        "```typescript",
                        "const gridState = this.parentVirtDir.state;",
                        "```"
                    ]
                }
            }
        },
        "methods": {
            "addScrollTop": {
                "comment": {
                    "parameters": {
                        "addTop": {
                            "comment": {
                                "shortText": "negative value to scroll up and positive to scroll down;"
                            }
                        }
                    },
                    "tags": {},
                    "shortText": [
                        "Shifts the scroll thumb position.",
                        "```typescript",
                        "this.parentVirtDir.addScrollTop(5);",
                        "```"
                    ]
                }
            },
            "scrollTo": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "Scrolls to the specified index.",
                        "```typescript",
                        "this.parentVirtDir.scrollTo(5);",
                        "```"
                    ]
                }
            },
            "scrollNext": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "Scrolls by one item into the appropriate next direction.",
                        "For \"horizontal\" orientation that will be the right column and for \"vertical\" that is the lower row.",
                        "```typescript",
                        "this.parentVirtDir.scrollNext();",
                        "```"
                    ]
                }
            },
            "scrollPrev": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "Scrolls by one item into the appropriate previous direction.",
                        "For \"horizontal\" orientation that will be the left column and for \"vertical\" that is the upper row.",
                        "```typescript",
                        "this.parentVirtDir.scrollPrev();",
                        "```"
                    ]
                }
            },
            "scrollNextPage": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "Scrolls by one page into the appropriate next direction.",
                        "For \"horizontal\" orientation that will be one view to the right and for \"vertical\" that is one view to the bottom.",
                        "```typescript",
                        "this.parentVirtDir.scrollNextPage();",
                        "```"
                    ]
                }
            },
            "scrollPrevPage": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "Scrolls by one page into the appropriate previous direction.",
                        "For \"horizontal\" orientation that will be one view to the left and for \"vertical\" that is one view to the top.",
                        "```typescript",
                        "this.parentVirtDir.scrollPrevPage();",
                        "```"
                    ]
                }
            },
            "getItemCountInView": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "Returns the total number of items that are fully visible.",
                        "```typescript",
                        "this.parentVirtDir.getItemCountInView();",
                        "```"
                    ]
                }
            },
            "getScroll": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "Returns a reference to the scrollbar DOM element.",
                        "This is either a vertical or horizontal scrollbar depending on the specified igxForScrollOrientation.",
                        "```typescript",
                        "dir.getScroll();",
                        "```"
                    ]
                }
            },
            "getSizeAt": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "Returns the size of the element at the specified index.",
                        "```typescript",
                        "this.parentVirtDir.getSizeAt(1);",
                        "```"
                    ]
                }
            },
            "getScrollForIndex": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "Returns the scroll offset of the element at the specified index.",
                        "```typescript",
                        "this.parentVirtDir.getScrollForIndex(1);",
                        "```"
                    ]
                }
            },
            "getIndexAtScroll": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "Returns the index of the element at the specified offset.",
                        "```typescript",
                        "this.parentVirtDir.getIndexAtScroll(100);",
                        "```"
                    ]
                }
            },
            "isIndexOutsideView": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "Returns whether the target index is outside the view.",
                        "```typescript",
                        "this.parentVirtDir.isIndexOutsideView(10);",
                        "```"
                    ]
                }
            }
        },
        "accessors": {
            "igxForTotalItemCount": {
                "getter": {
                    "comment": {
                        "tags": {},
                        "shortText": [
                            "The total count of the virtual data items, when using remote service.",
                            "Similar to the property totalItemCount, but this will allow setting the data count into the template.",
                            "```html",
                            "<ng-template igxFor let-item [igxForOf]=\"data | async\" [igxForTotalItemCount]=\"count | async\"",
                            " [igxForContainerSize]=\"'500px'\" [igxForItemSize]=\"'50px'\"></ng-template>",
                            "```"
                        ]
                    }
                },
                "setter": {
                    "comment": {
                        "tags": {},
                        "shortText": [
                            "The total count of the virtual data items, when using remote service.",
                            "Similar to the property totalItemCount, but this will allow setting the data count into the template.",
                            "```html",
                            "<ng-template igxFor let-item [igxForOf]=\"data | async\" [igxForTotalItemCount]=\"count | async\"",
                            " [igxForContainerSize]=\"'500px'\" [igxForItemSize]=\"'50px'\"></ng-template>",
                            "```"
                        ]
                    }
                }
            },
            "totalItemCount": {
                "getter": {
                    "comment": {
                        "tags": {},
                        "shortText": [
                            "The total count of the virtual data items, when using remote service.",
                            "```typescript",
                            "this.parentVirtDir.totalItemCount = data.Count;",
                            "```"
                        ]
                    }
                },
                "setter": {
                    "comment": {
                        "tags": {},
                        "shortText": [
                            "The total count of the virtual data items, when using remote service.",
                            "```typescript",
                            "this.parentVirtDir.totalItemCount = data.Count;",
                            "```"
                        ]
                    }
                }
            },
            "scrollPosition": {
                "getter": {
                    "comment": {
                        "tags": {},
                        "shortText": [
                            "Gets/Sets the scroll position.",
                            "```typescript",
                            "const position = directive.scrollPosition;",
                            "directive.scrollPosition = value;",
                            "```"
                        ]
                    }
                },
                "setter": {
                    "comment": {
                        "tags": {},
                        "shortText": [
                            "Gets/Sets the scroll position.",
                            "```typescript",
                            "const position = directive.scrollPosition;",
                            "directive.scrollPosition = value;",
                            "```"
                        ]
                    }
                }
            },
            "igxForTrackBy": {
                "getter": {
                    "comment": {
                        "tags": {},
                        "shortText": [
                            "Gets the function used to track changes in the items collection.",
                            "By default the object references are compared. However this can be optimized if you have unique identifier",
                            "value that can be used for the comparison instead of the object ref or if you have some other property values",
                            "in the item object that should be tracked for changes.",
                            "This option is similar to ngForTrackBy.",
                            "```typescript",
                            "const trackFunc = this.parentVirtDir.igxForTrackBy;",
                            "```"
                        ]
                    }
                },
                "setter": {
                    "comment": {
                        "tags": {},
                        "shortText": [
                            "Sets the function used to track changes in the items collection.",
                            "This function can be set in scenarios where you want to optimize or",
                            "customize the tracking of changes for the items in the collection.",
                            "The igxForTrackBy function takes the index and the current item as arguments and needs to return the unique identifier for this item.",
                            "```typescript",
                            "this.parentVirtDir.igxForTrackBy = (index, item) => {",
                            "     return item.id + item.width;",
                            "};",
                            "```"
                        ]
                    }
                }
            }
        }
    }
}