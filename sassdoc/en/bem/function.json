{
    "bem--selector-to-string": {
        "description": [
            "<p>Converts a passed selector value into plain string.</p>",
            ""
        ],
        "parameters": {
            "s": {
                "description": [
                    "<p>The selector to be converted.</p>",
                    ""
                ]
            }
        }
    },
    "bem--with-dot": {
        "description": [
            "<p>Prepends a dot to the passed BEM selector.</p>",
            ""
        ],
        "parameters": {
            "x": {
                "description": [
                    "<p>The BEM selector to prepend a dot to.</p>",
                    ""
                ]
            }
        },
        "example": [
            {
                "description": [
                    "<p>Returns</p>",
                    ""
                ],
                "code": [
                    ".#{$x}"
                ]
            }
        ]
    },
    "bem--mod-str": {
        "description": [
            "<p>Converts a key-value map into a modifier string.</p>",
            ""
        ],
        "parameters": {
            "m": {
                "description": [
                    "<p>The modifier list to get converted.</p>",
                    ""
                ]
            }
        }
    },
    "bem--elem-str": {
        "description": [
            "<p>Prefixes the block name to an element selector string,",
            "with the element separator string used as a divider.</p>",
            ""
        ],
        "parameters": {
            "b": {
                "description": [
                    "<p>The block name.</p>",
                    ""
                ]
            },
            "e": {
                "description": [
                    "<p>The element name.</p>",
                    ""
                ]
            }
        },
        "example": [
            {
                "description": [
                    "<p>Returns</p>",
                    ""
                ],
                "code": [
                    ".block__element"
                ]
            }
        ]
    },
    "bem--bem-str": {
        "description": [
            "<p>Returns a block selector string affixed by the modifier selector,",
            "followed by the element selector string.</p>",
            ""
        ],
        "parameters": {
            "block": {
                "description": [
                    "<p>The block name.</p>",
                    ""
                ]
            },
            "elem": {
                "description": [
                    "<p>The sub-element name.</p>",
                    ""
                ]
            },
            "mod": {
                "description": [
                    "<p>The modifier name.</p>",
                    ""
                ]
            }
        },
        "example": [
            {
                "description": [
                    "<p>Returns</p>",
                    ""
                ],
                "code": [
                    ".block--modifier .block__element"
                ]
            }
        ]
    },
    "bem--contains-elem": {
        "description": [
            "<p>Checks if the element separator string is part of the passed string.</p>",
            ""
        ],
        "parameters": {
            "x": {
                "description": [
                    "<p>The string to check.</p>",
                    ""
                ]
            }
        },
        "returns": {
            "description": [
                "<p>Will return the index of the occurance,",
                "or null if the element separator name is not part of the passed string.</p>",
                ""
            ]
        }
    },
    "bem--contains-mod": {
        "description": [
            "<p>Checks if the modifier separator string is part of the passed string.</p>",
            ""
        ],
        "parameters": {
            "x": {
                "description": [
                    "<p>The string to check.</p>",
                    ""
                ]
            }
        },
        "returns": {
            "description": [
                "<p>Will return the index of the occurance,",
                "or null if the modifier separator string is not part of the passed string.</p>",
                ""
            ]
        }
    },
    "bem--contains-pseudo": {
        "description": [
            "<p>Checks if the passed selector string contains a colon.</p>",
            ""
        ],
        "parameters": {
            "x": {
                "description": [
                    "<p>The string to check for colons.</p>",
                    ""
                ]
            }
        },
        "returns": {
            "description": [
                "<p>Will return the index of the occurance,",
                "or null if the string does not contain any colons.</p>",
                ""
            ]
        }
    },
    "bem--extract-block": {
        "description": [
            "<p>Returns the BEM block-name that generated <code>$x</code>. Does not include leading &quot;.&quot;.</p>",
            ""
        ],
        "parameters": {
            "x": {
                "description": [
                    "<p>The block name.</p>",
                    ""
                ]
            }
        }
    },
    "bem--extract-first-selector": {
        "description": [
            "<p>Returns the first selector of a nested selector string.</p>",
            ""
        ],
        "parameters": {
            "x": {
                "description": [
                    "<p>The selector to search for.</p>",
                    ""
                ]
            }
        }
    },
    "bem-selector": {
        "description": [
            "<p>Generates a full BEM selector.</p>",
            ""
        ],
        "parameters": {
            "block": {
                "description": [
                    "<p>Required. A string block name.</p>",
                    ""
                ]
            },
            "elem": {
                "description": [
                    "<p>Optional. A sub-element name. If <code>$mod</code> is not present, it is",
                    "joined with $block. If $mod is present, it is nested under <code>$block--$mod</code>.</p>",
                    ""
                ]
            },
            "mod": {
                "description": [
                    "<p>Optional. A block modifier.</p>",
                    ""
                ]
            }
        },
        "example": [
            {
                "description": [
                    "<p>Include a block</p>",
                    ""
                ],
                "code": [
                    "@include bem-selector(block); // outputs .block"
                ]
            },
            {
                "description": [
                    "<p>Include a block and an element</p>",
                    ""
                ],
                "code": [
                    "@include bem-selector(block, $e:elem); // outputs .block__elem"
                ]
            },
            {
                "description": [
                    "<p>Include block, element, and element modifier</p>",
                    ""
                ],
                "code": [
                    "@include bem-selector(block, $e:(elem,emod); // outputs .block__elem-emod"
                ]
            },
            {
                "description": [
                    "<p>Include block and block modifier</p>",
                    ""
                ],
                "code": [
                    "@include bem-selector(block, $m:mod) // outputs .block--mod"
                ]
            },
            {
                "description": [
                    "<p>Include block and modifier value</p>",
                    ""
                ],
                "code": [
                    "@include bem-selector(block, $m:(mod:val)); // outputs .block--mod-val"
                ]
            },
            {
                "description": [
                    "<p>Include block modifier followed by block sub-element</p>",
                    ""
                ],
                "code": [
                    "@include bem-selector(block, $m:mod, $e:elem); // outputs .block--mod .block__elem"
                ]
            }
        ]
    }
}