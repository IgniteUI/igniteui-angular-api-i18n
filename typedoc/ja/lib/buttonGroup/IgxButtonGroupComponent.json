{
    "IgxButtonGroupComponent": {
        "comment": {
            "text": [
                "Ignite UI Button Group はボタンのグループを垂直方向または水平方向に表示します。",
                "グループは単一、複数、および切り替え選択をサポートします。",
                "例:",
                "```html",
                "<igx-buttongroup multiSelection=\"true\" [values]=\"fontOptions\">",
                "</igx-buttongroup>",
                "```",
                "以上に表示される `fontOptions` 値は以下で定義されます。",
                "```typescript",
                "this.fontOptions = [",
                "  { icon: 'format_bold', selected: false },",
                "  { icon: 'format_italic', selected: false },",
                "  { icon: 'format_underlined', selected: false }];",
                "```"
            ],
            "shortText": [
                "**Ignite UI for Angular Button Group** -",
                "[ヘルプ](https://jp.infragistics.com/products/ignite-ui-angular/angular/components/buttongroup.html)"
            ]
        },
        "properties": {
            "id": {
                "comment": {
                    "shortText": [
                        "`id` 属性の値を設定する @Input プロパティ。設定されていない場合、自動的に生成されます。",
                        "```html",
                        " <igx-buttongroup [id]=\"'igx-dialog-56'\" [multiSelection]=\"!multi\" [values]=\"alignOptions\">",
                        "```"
                    ]
                }
            },
            "multiSelection": {
                "comment": {
                    "shortText": [
                        "複数のボタンの選択を有効にする @Input プロパティ。デフォルトで、複数選択は false です。",
                        "```html",
                        "<igx-buttongroup [multiSelection]=\"false\" [alignment]=\"alignment\"></igx-buttongroup>",
                        "```"
                    ]
                }
            },
            "values": {
                "comment": {
                    "shortText": [
                        "ボタン グループのボタンの設定を許可する @Input プロパティ。",
                        "```typescript",
                        " public ngOnInit() {",
                        "     this.cities = [",
                        "       new Button({",
                        "         label: \"Sofia\"",
                        "     }),",
                        "       new Button({",
                        "         label: \"London\"",
                        "     }),",
                        "       new Button({",
                        "         label: \"New York\",",
                        "         selected: true",
                        "     }),",
                        "       new Button({",
                        "         label: \"Tokyo\"",
                        "     })",
                        " ];",
                        " }",
                        " //..",
                        "```",
                        "```html",
                        " <igx-buttongroup [multiSelection]=\"false\" [values]=\"cities\"></igx-buttongroup>",
                        "```"
                    ]
                }
            },
            "onSelect": {
                "comment": {
                    "shortText": [
                        "ボタンが選択されたときにイベントを発生する @Output プロパティ。",
                        "```typescript",
                        "@ViewChild(\"toast\")",
                        "private toast: IgxToastComponent;",
                        "public onSelect(buttongroup){",
                        "   this.toast.show()",
                        "}",
                        "//...",
                        "```",
                        "```html",
                        "<igx-buttongroup #MyChild [multiSelection]=\"!multi\" (onSelect)=\"onSelect($event)\"></igx-buttongroup>",
                        "<igx-toast #toast message=\"You have made a selection!\"></igx-toast>",
                        "```"
                    ]
                }
            },
            "onUnselect": {
                "comment": {
                    "shortText": [
                        "ボタンが選択解除されたときにイベントを発生する @Output プロパティ。",
                        "```typescript",
                        "@ViewChild(\"toast\")",
                        "private toast: IgxToastComponent;",
                        "public onUnselect(buttongroup){",
                        "   this.toast.show()",
                        "}",
                        "//...",
                        "```",
                        "```html",
                        "igx-buttongroup #MyChild [multiSelection]=\"multi\" (onUnselect)=\"onUnselect($event)\"></igx-buttongroup>",
                        "<igx-toast #toast message=\"You have deselected a button!\"></igx-toast>",
                        "```"
                    ]
                }
            }
        },
        "methods": {
            "selectButton": {
                "comment": {
                    "tags": {
                        "memberof": {
                            "comment": {
                                "text": [
                                    "{@link IgxButtonGroupComponent}",
                                    "```typescript",
                                    "@ViewChild(\"MyChild\")",
                                    "private buttonG: IgxButtonGroupComponent;",
                                    "ngAfterViewInit(){",
                                    "   this.buttonG.selectButton(2);",
                                    "   this.cdr.detectChanges();",
                                    "}",
                                    "```"
                                ],
                                "tagName": "次のメンバー:"
                            }
                        }
                    },
                    "shortText": "インデックスでボタンを選択します。"
                }
            },
            "deselectButton": {
                "comment": {
                    "tags": {
                        "memberof": {
                            "comment": {
                                "text": [
                                    "{@link IgxButtonGroupComponent}",
                                    "```typescript",
                                    "@ViewChild(\"MyChild\")",
                                    "private buttonG: IgxButtonGroupComponent;",
                                    "ngAfterViewInit(){",
                                    "   this.buttonG.deselectButton(2);",
                                    "   this.cdr.detectChanges();",
                                    "}",
                                    "```"
                                ],
                                "tagName": "次のメンバー:"
                            }
                        }
                    },
                    "shortText": "インデックスでボタンを選択解除します。"
                }
            }
        },
        "accessors": {
            "buttons": {
                "getter": {
                    "comment": {
                        "shortText": "ボタン グループ内のすべてのボタンを含むコレクション。"
                    }
                }
            },
            "itemContentCssClass": {
                "setter": {
                    "comment": {
                        "shortText": [
                            "`itemContentCssClass` 入力を使用してスタイルの設定を許可します。",
                            "値はボタン グループに適用する CSS クラス名になります。",
                            "```typescript",
                            "public style1 = \"styleClass\";",
                            "//..",
                            "```",
                            "```html",
                            "<igx-buttongroup [itemContentCssClass]=\"style1\" [multiSelection]=\"!multi\" [values]=\"alignOptions\">",
                            "```"
                        ]
                    }
                },
                "getter": {
                    "comment": {
                        "shortText": [
                            "`IgxButtonGroup` の項目コンテンツの CSS クラスを返します。",
                            "```typescript",
                            "@ViewChild(\"MyChild\")",
                            "public buttonG: IgxButtonGroupComponent;",
                            "ngAfterViewInit(){",
                            "  let buttonSelect = this.buttonG.itemContentCssClass;",
                            "}",
                            "```"
                        ]
                    }
                }
            },
            "disabled": {
                "getter": {
                    "comment": {
                        "shortText": [
                            "`igx-buttongroup` コンポーネントの無効化を許可する @Input プロパティ。デフォルトで false です。",
                            "```html",
                            "<igx-buttongroup [disabled]=\"true\" [multiSelection]=\"multi\" [values]=\"fontOptions\"></igx-buttongroup>",
                            "```"
                        ]
                    }
                },
                "setter": {
                    "comment": {
                        "shortText": [
                            "`igx-buttongroup` コンポーネントの無効化を許可する @Input プロパティ。デフォルトで false です。",
                            "```html",
                            "<igx-buttongroup [disabled]=\"true\" [multiSelection]=\"multi\" [values]=\"fontOptions\"></igx-buttongroup>",
                            "```"
                        ]
                    }
                }
            },
            "alignment": {
                "setter": {
                    "comment": {
                        "shortText": [
                            "ボタン グループの配置の設定を許可します。",
                            "利用可能なオプションは、`ButtonGroupAlignment.horizontal` （デフォルト) と `ButtonGroupAlignment.vertical` です。",
                            "```typescript",
                            "public alignment = ButtonGroupAlignment.vertical;",
                            "//..",
                            "```",
                            "```html",
                            "<igx-buttongroup [multiSelection]=\"false\" [values]=\"cities\" [alignment]=\"alignment\"></igx-buttongroup>",
                            "```"
                        ]
                    }
                },
                "getter": {
                    "comment": {
                        "shortText": [
                            "`igx-buttongroup` の配置を返します。",
                            "```typescript",
                            "@ViewChild(\"MyChild\")",
                            "public buttonG: IgxButtonGroupComponent;",
                            "ngAfterViewInit(){",
                            "   let buttonAlignment = this.buttonG.alignment;",
                            "}",
                            "```"
                        ]
                    }
                }
            },
            "isVertical": {
                "getter": {
                    "comment": {
                        "shortText": [
                            "`igx-buttongroup` の配置が垂直方向の場合に true を返します。",
                            "アクセサーが正しく動作するためにプロパティを明示的に設定します。",
                            "```html",
                            "<igx-buttongroup #MyChild [alignment]=\"alignment\" [values]=\"alignOptions\">",
                            "```",
                            "```typescript",
                            "//...",
                            "@ViewChild(\"MyChild\")",
                            "private buttonG: IgxButtonGroupComponent;",
                            "ngAfterViewInit(){",
                            "   let orientation = this.buttonG.isVertical;",
                            "}",
                            "```"
                        ]
                    }
                }
            },
            "selectedButtons": {
                "getter": {
                    "comment": {
                        "shortText": [
                            "選択済みのボタンを取得します。",
                            "```typescript",
                            "@ViewChild(\"MyChild\")",
                            "private buttonG: IgxButtonGroupComponent;",
                            "ngAfterViewInit(){",
                            "   let selectedButton = this.buttonG.selectedButtons;",
                            "}",
                            "```"
                        ]
                    }
                }
            },
            "displayDensity": {
                "getter": {
                    "comment": {
                        "shortText": [
                            "コンポーネントのテーマを返します。",
                            "デフォルト テーマは `comfortable` です。",
                            "利用可能なオプションは `comfortable`、`cosy`、および `compact` です。",
                            "```typescript",
                            "let componentTheme = this.component.displayDensity;",
                            "```"
                        ]
                    }
                },
                "setter": {
                    "comment": {
                        "shortText": "コンポーネントのテーマを設定します。"
                    }
                }
            }
        }
    }
}