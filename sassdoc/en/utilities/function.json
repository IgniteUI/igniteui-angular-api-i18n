{
    "em": {
        "description": [
            "<p>Converts pixels to relative values (em).</p>",
            ""
        ],
        "parameters": {
            "pixels": {
                "description": [
                    "<p>The pixel value to be converted.</p>",
                    ""
                ]
            },
            "context": {
                "description": [
                    "<p>The base context to convert against.</p>",
                    ""
                ]
            }
        }
    },
    "rem": {
        "description": [
            "<p>Pixels to root relative values (rem).</p>",
            ""
        ],
        "parameters": {
            "pixels": {
                "description": [
                    "<p>The pixel value to be converted.</p>",
                    ""
                ]
            },
            "context": {
                "description": [
                    "<p>The base context to convert against.</p>",
                    ""
                ]
            }
        }
    },
    "luminance": {
        "description": [
            "<p>Calculates the luminance for a given color.",
            "See <a href=\"https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\">https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests</a>.</p>",
            ""
        ],
        "parameters": {
            "color": {
                "description": [
                    "<p>The color to calculate luminance for.</p>",
                    ""
                ]
            }
        }
    },
    "contrast": {
        "description": [
            "<p>Calculates the contrast ratio between two colors.",
            "See <a href=\"https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\">https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests</a></p>",
            ""
        ],
        "parameters": {
            "background": {
                "description": [
                    "<p>The background color.</p>",
                    ""
                ]
            },
            "foreground": {
                "description": [
                    "<p>The foreground color.</p>",
                    ""
                ]
            }
        },
        "returns": {
            "description": [
                "<p>The contrast ratio between the background and foreground colors.</p>",
                ""
            ]
        }
    },
    "is-direction": {
        "description": [
            "<p>Test if <code>$value</code> is a valid direction.</p>",
            ""
        ],
        "parameters": {
            "value": {
                "description": [
                    "<p>The value to test.</p>",
                    ""
                ]
            }
        }
    },
    "is-component": {
        "description": [
            "<p>Test if a component, or list of components",
            "is in the list of known components.</p>",
            ""
        ],
        "parameters": {
            "excludes": {
                "description": [
                    "<p>The components list to check in.</p>",
                    ""
                ]
            }
        },
        "returns": {
            "description": [
                "<p>The list of passed items.</p>",
                ""
            ]
        }
    },
    "to-string": {
        "description": [
            "<p>Converts numbers to HEX value strings.</p>",
            ""
        ],
        "parameters": {
            "num": {
                "description": [
                    "<p>The number to convert.</p>",
                    ""
                ]
            },
            "radix": {
                "description": [
                    "<p>The base radix to use for the conversion.</p>",
                    ""
                ]
            }
        },
        "returns": {
            "description": [
                "<p>The resulting string.</p>",
                ""
            ]
        }
    },
    "hexrgba": {
        "description": [
            "<p>Converts a rgba color to a hexidecimal color.</p>",
            ""
        ],
        "parameters": {
            "rgba": {
                "description": [
                    "<p>The rgba color to convert.</p>",
                    ""
                ]
            },
            "background": {
                "description": [
                    "<p>The background color to convert against.</p>",
                    ""
                ]
            }
        },
        "returns": {
            "description": [
                "<p>The hexidecimal representation of the rgba value.</p>",
                ""
            ]
        }
    },
    "extend": {
        "description": [
            "<p>Extends a Map object with the properties of another Map object.</p>",
            ""
        ],
        "parameters": {
            "map1": {
                "description": [
                    "<p>The source map to get extended.</p>",
                    ""
                ]
            },
            "map2": {
                "description": [
                    "<p>The map extending the source map.</p>",
                    ""
                ]
            }
        },
        "returns": {
            "description": [
                "<p>Returns the original map extended with the properties of the second map.</p>",
                ""
            ]
        }
    },
    "--var": {
        "description": [
            "<p>Returns a CSS property value. It could return either css &#39;--var&#39; or",
            "a plain string value based on theme configuration.</p>",
            ""
        ],
        "parameters": {
            "map": {
                "description": [
                    "<p>The source theme to be used to read values from.</p>",
                    ""
                ]
            },
            "key": {
                "description": [
                    "<p>A key from the theme map to assign as value to the property.</p>",
                    ""
                ]
            }
        },
        "returns": {
            "description": [
                "<p>The value of the key in the passed map, or the name of key concatenated with the key name.</p>",
                ""
            ]
        },
        "example": [
            {
                "description": [
                    "<p>Assign the color property in a rule-set to a value from the default avatar theme.</p>",
                    ""
                ],
                "code": [
                    "%igx-avatar-icon {",
                    "  color: --var($avatar-theme, 'icon-color');",
                    "}",
                    "// If legacy-support is off, it will produce the following:",
                    "// %igx-avatar-icon {",
                    "//   color: var(--igx-avatar-icon-color);",
                    "// }",
                    "// otherwise, it will return the value for key 'icon-color' in the '$avatar-theme';"
                ]
            }
        ]
    },
    "str-split": {
        "description": [
            "<p>Splits a string into a list by a given separator.</p>",
            ""
        ],
        "parameters": {
            "string": {
                "description": [
                    "<p>The string to split.</p>",
                    ""
                ]
            },
            "separator": {
                "description": [
                    "<p>The string separator to split the string by.</p>",
                    ""
                ]
            }
        }
    },
    "resolve-value": {
        "description": [
            "<p>Returns a value for a given instruction map, where the",
            "keys of the map are the names of the functions to be called,",
            "and the value for a given key is the arguments the function",
            "should be called with.",
            "The instruction set is executed left-to-right. The output of",
            "the first instruction is then passed as input to the next, and so on.</p>",
            ""
        ],
        "parameters": {
            "ctx": {
                "description": [
                    "<p>The instruction map to be used.</p>",
                    ""
                ]
            },
            "extra": {
                "description": [
                    "<p>Additional arguments to be passed during function calls.",
                    "Will only be applied for <code>igx-color</code> and <code>igx-contrast-color</code> functions.</p>",
                    ""
                ]
            }
        },
        "example": [
            {
                "description": [
                    "<p>Resolve <code>igx-color</code> and apply 80% opacity</p>",
                    ""
                ],
                "code": [
                    "$instructions: (",
                    "  igx-color: ('primary', 500),",
                    "  rgba: .2",
                    ");",
                    "// $some-palette is a palette we pass as extra arguments",
                    "$resolved-color: resolve-value($instructions, $some-palette);"
                ]
            }
        ]
    },
    "random-color": {
        "description": [
            "<p>Returns a random color.</p>",
            ""
        ]
    },
    "apply-palette": {
        "description": [
            "<p>Applies an <code>igx-palette</code> to a given theme schema.</p>",
            ""
        ],
        "parameters": {
            "schema": {
                "description": [
                    "<p>A theme schema.</p>",
                    ""
                ]
            },
            "palette": {
                "description": [
                    "<p>An igx-palette map.</p>",
                    ""
                ]
            }
        },
        "returns": {
            "description": [
                "<p>A map with the resolved palette values.</p>",
                ""
            ]
        },
        "example": [
            {
                "description": [
                    "<p>Apply an <code>igx-palette</code> to theme schema</p>",
                    ""
                ],
                "code": [
                    "$custom-palette: igx-palette($primary: red, $secondary: blue);",
                    "$custom-schema: (",
                    "  my-color: (",
                    "     igx-color: ('primary', 800),",
                    "     rgba: .5",
                    "  ),",
                    "  roundness: 5px",
                    ");",
                    "$theme: apply-palette($custom-schema, $custom-palette); // A map with palette values resolved."
                ]
            }
        ]
    },
    "is-root": {
        "description": [
            "<p>Returns true if the scope where it&#39;s called",
            "is the root of the document.</p>",
            ""
        ],
        "example": [
            {
                "description": [
                    "<p>Check if the current scope is root</p>",
                    ""
                ],
                "code": [
                    "@mixin smart-mixin() {",
                    "  $scope: if(is-root(), ':root', '&');",
                    "",
                    "  #{$scope} {",
                    "    /* style rules here */",
                    "  }",
                    "}"
                ]
            }
        ]
    },
    "fraction-clamp": {
        "description": [
            "<p>Returns calc value between given min and max values</p>",
            ""
        ]
    },
    "round-borders": {
        "description": [
            "<p>If the value is unitless, returns value or list of values between 0 and 1",
            "where the 0 is the minimum and 1 is the maximum",
            "If the value is NOT unitless return the value or list of values with the unit you pass</p>",
            ""
        ]
    },
    "lighten-color": {
        "description": [
            "<p>A thin wrapper around Sass&#39; lighten function",
            "to allow pass-through for values other than those",
            "of type color.</p>",
            ""
        ],
        "parameters": {
            "color": {
                "description": [
                    "<p>The color to be lightened.</p>",
                    ""
                ]
            },
            "amount": {
                "description": [
                    "<p>The percent value by which the color will be lightened.</p>",
                    ""
                ]
            }
        },
        "returns": {
            "description": [
                "<p>The modified color as produced by the lighten function.",
                "If the value passed is not a color, then the passed value will be returned.</p>",
                ""
            ]
        }
    },
    "darken-color": {
        "description": [
            "<p>A thin wrapper around Sass&#39; darken function",
            "to allow pass-through for values other than those",
            "of type color.</p>",
            ""
        ],
        "parameters": {
            "color": {
                "description": [
                    "<p>The color to be lightened.</p>",
                    ""
                ]
            },
            "amount": {
                "description": [
                    "<p>The percent value by which the color will be lightened.</p>",
                    ""
                ]
            }
        },
        "returns": {
            "description": [
                "<p>The modified color as produced by the lighten function.",
                "If the value passed is not a color, then the passed value will be returned.</p>",
                ""
            ]
        }
    }
}