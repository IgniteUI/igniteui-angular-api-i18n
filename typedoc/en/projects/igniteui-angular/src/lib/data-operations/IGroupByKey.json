{
    "IGroupByKey": {
        "properties": {
            "length": {
                "comment": {
                    "tags": {},
                    "shortText": "Gets or sets the length of the array. This is a number one higher than the highest index in the array."
                }
            }
        },
        "methods": {
            "from": {
                "comment": {
                    "parameters": {
                        "iterable": {
                            "comment": {
                                "text": "An iterable object to convert to an array."
                            }
                        },
                        "mapfn": {
                            "comment": {
                                "text": "A mapping function to call on every element of the array."
                            }
                        },
                        "thisArg": {
                            "comment": {
                                "text": "Value of 'this' used to invoke the mapfn."
                            }
                        }
                    },
                    "tags": {},
                    "shortText": "Creates an array from an iterable object."
                }
            },
            "toLocaleString": {
                "comment": {
                    "tags": {},
                    "shortText": "Returns a string representation of an array. The elements are converted to string using their toLocaleString methods."
                }
            },
            "push": {
                "comment": {
                    "parameters": {
                        "items": {
                            "comment": {
                                "text": "New elements to add to the array."
                            }
                        }
                    },
                    "tags": {},
                    "shortText": "Appends new elements to the end of an array, and returns the new length of the array."
                }
            },
            "concat": {
                "comment": {
                    "parameters": {
                        "items": {
                            "comment": {
                                "text": "Additional arrays and/or items to add to the end of the array."
                            }
                        }
                    },
                    "tags": {},
                    "shortText": [
                        "Combines two or more arrays.",
                        "This method returns a new array without modifying any existing arrays."
                    ]
                }
            },
            "join": {
                "comment": {
                    "parameters": {
                        "separator": {
                            "comment": {
                                "text": "A string used to separate one element of the array from the next in the resulting string. If omitted, the array elements are separated with a comma."
                            }
                        }
                    },
                    "tags": {},
                    "shortText": "Adds all the elements of an array into a string, separated by the specified separator string."
                }
            },
            "shift": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "Removes the first element from an array and returns it.",
                        "If the array is empty, undefined is returned and the array is not modified."
                    ]
                }
            },
            "sort": {
                "comment": {
                    "parameters": {
                        "compareFn": {
                            "comment": {
                                "text": [
                                    "Function used to determine the order of the elements. It is expected to return",
                                    "a negative value if first argument is less than second argument, zero if they're equal and a positive",
                                    "value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.",
                                    "```ts",
                                    "[11,2,22,1].sort((a, b) => a - b)",
                                    "```"
                                ]
                            }
                        }
                    },
                    "tags": {},
                    "shortText": [
                        "Sorts an array in place.",
                        "This method mutates the array and returns a reference to the same array."
                    ]
                }
            },
            "splice": {
                "comment": {
                    "parameters": {
                        "start": {
                            "comment": {
                                "text": "The zero-based location in the array from which to start removing elements."
                            }
                        },
                        "deleteCount": {
                            "comment": {
                                "text": "The number of elements to remove."
                            }
                        },
                        "items": {
                            "comment": {
                                "text": "Elements to insert into the array in place of the deleted elements."
                            }
                        }
                    },
                    "tags": {
                        "returns": {
                            "comment": {
                                "text": "An array containing the elements that were deleted.",
                                "tagName": "returns"
                            }
                        }
                    },
                    "shortText": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements."
                }
            },
            "unshift": {
                "comment": {
                    "parameters": {
                        "items": {
                            "comment": {
                                "text": "Elements to insert at the start of the array."
                            }
                        }
                    },
                    "tags": {},
                    "shortText": "Inserts new elements at the start of an array, and returns the new length of the array."
                }
            },
            "lastIndexOf": {
                "comment": {
                    "parameters": {
                        "searchElement": {
                            "comment": {
                                "text": "The value to locate in the array."
                            }
                        },
                        "fromIndex": {
                            "comment": {
                                "text": "The array index at which to begin searching backward. If fromIndex is omitted, the search starts at the last index in the array."
                            }
                        }
                    },
                    "tags": {},
                    "shortText": "Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present."
                }
            },
            "every": {
                "comment": {
                    "parameters": {
                        "predicate": {
                            "comment": {
                                "text": [
                                    "A function that accepts up to three arguments. The every method calls",
                                    "the predicate function for each element in the array until the predicate returns a value",
                                    "which is coercible to the Boolean value false, or until the end of the array."
                                ]
                            }
                        },
                        "thisArg": {
                            "comment": {
                                "text": [
                                    "An object to which the this keyword can refer in the predicate function.",
                                    "If thisArg is omitted, undefined is used as the this value."
                                ]
                            }
                        }
                    },
                    "tags": {},
                    "shortText": "Determines whether all the members of an array satisfy the specified test."
                }
            },
            "some": {
                "comment": {
                    "parameters": {
                        "predicate": {
                            "comment": {
                                "text": [
                                    "A function that accepts up to three arguments. The some method calls",
                                    "the predicate function for each element in the array until the predicate returns a value",
                                    "which is coercible to the Boolean value true, or until the end of the array."
                                ]
                            }
                        },
                        "thisArg": {
                            "comment": {
                                "text": [
                                    "An object to which the this keyword can refer in the predicate function.",
                                    "If thisArg is omitted, undefined is used as the this value."
                                ]
                            }
                        }
                    },
                    "tags": {},
                    "shortText": "Determines whether the specified callback function returns true for any element of an array."
                }
            },
            "map": {
                "comment": {
                    "parameters": {
                        "callbackfn": {
                            "comment": {
                                "text": "A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array."
                            }
                        },
                        "thisArg": {
                            "comment": {
                                "text": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."
                            }
                        }
                    },
                    "tags": {},
                    "shortText": "Calls a defined callback function on each element of an array, and returns an array that contains the results."
                }
            },
            "filter": {
                "comment": {
                    "parameters": {
                        "predicate": {
                            "comment": {
                                "text": "A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array."
                            }
                        },
                        "thisArg": {
                            "comment": {
                                "text": "An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value."
                            }
                        }
                    },
                    "tags": {},
                    "shortText": "Returns the elements of an array that meet the condition specified in a callback function."
                }
            },
            "reduce": {
                "comment": {
                    "parameters": {
                        "callbackfn": {
                            "comment": {
                                "text": "A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array."
                            }
                        },
                        "initialValue": {
                            "comment": {
                                "text": "If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value."
                            }
                        }
                    },
                    "tags": {},
                    "shortText": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."
                }
            },
            "find": {
                "comment": {
                    "parameters": {
                        "predicate": {
                            "comment": {
                                "text": [
                                    "find calls predicate once for each element of the array, in ascending",
                                    "order, until it finds one where predicate returns true. If such an element is found, find",
                                    "immediately returns that element value. Otherwise, find returns undefined."
                                ]
                            }
                        },
                        "thisArg": {
                            "comment": {
                                "text": [
                                    "If provided, it will be used as the this value for each invocation of",
                                    "predicate. If it is not provided, undefined is used instead."
                                ]
                            }
                        }
                    },
                    "tags": {},
                    "shortText": [
                        "Returns the value of the first element in the array where predicate is true, and undefined",
                        "otherwise."
                    ]
                }
            },
            "fill": {
                "comment": {
                    "parameters": {
                        "value": {
                            "comment": {
                                "text": "value to fill array section with"
                            }
                        },
                        "start": {
                            "comment": {
                                "text": [
                                    "index to start filling the array at. If start is negative, it is treated as",
                                    "length+start where length is the length of the array."
                                ]
                            }
                        },
                        "end": {
                            "comment": {
                                "text": [
                                    "index to stop filling the array at. If end is negative, it is treated as",
                                    "length+end."
                                ]
                            }
                        }
                    },
                    "tags": {},
                    "shortText": "Changes all array elements from `start` to `end` index to a static `value` and returns the modified array"
                }
            },
            "entries": {
                "comment": {
                    "tags": {},
                    "shortText": "Returns an iterable of key, value pairs for every entry in the array"
                }
            },
            "values": {
                "comment": {
                    "tags": {},
                    "shortText": "Returns an iterable of values in the array"
                }
            },
            "[iterator]": {
                "comment": {
                    "tags": {},
                    "shortText": "Iterator"
                }
            }
        }
    }
}