{
    "IgxTreeComponent": {
        "comment": {
            "blockTags": [
                {
                    "tag": "@igxModule",
                    "content": [
                        {
                            "kind": "text",
                            "text": "IgxTreeModule"
                        }
                    ]
                },
                {
                    "tag": "@igxKeywords",
                    "content": [
                        {
                            "kind": "text",
                            "text": "tree"
                        }
                    ]
                },
                {
                    "tag": "@igxTheme",
                    "content": [
                        {
                            "kind": "text",
                            "text": "igx-tree-theme"
                        }
                    ]
                },
                {
                    "tag": "@igxGroup",
                    "content": [
                        {
                            "kind": "text",
                            "text": "Grids & Lists"
                        }
                    ]
                },
                {
                    "tag": "@備考",
                    "content": [
                        {
                            "kind": "text",
                            "text": "The Angular Tree Component allows users to represent hierarchical data in a tree-view structure, \nmaintaining parent-child relationships, as well as to define static tree-view structure without a corresponding data model. \nIts primary purpose is to allow end-users to visualize and navigate within hierarchical data structures. \nThe Ignite UI for Angular Tree Component also provides load on demand capabilities, item activation, \nbi-state and cascading selection of items through built-in checkboxes, built-in keyboard navigation and more."
                        }
                    ]
                },
                {
                    "tag": "@例",
                    "content": [
                        {
                            "kind": "code",
                            "text": "```html\n<igx-tree>\n  <igx-tree-node>\n     I am a parent node 1\n     <igx-tree-node>\n         I am a child node 1\n     </igx-tree-node>\n     ...\n  </igx-tree-node>\n\t ...\n</igx-tree>\n```"
                        }
                    ]
                }
            ],
            "modifierTags": {},
            "summary": [
                {
                    "kind": "text",
                    "text": "IgxTreeComponent allows a developer to show a set of nodes in a hierarchical fashion."
                }
            ]
        },
        "properties": {
            "singleBranchExpand": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Get/Set how the tree should handle branch expansion.\nIf set to "
                        },
                        {
                            "kind": "code",
                            "text": "`true`"
                        },
                        {
                            "kind": "text",
                            "text": ", only a single branch can be expanded at a time, collapsing all others\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```html\n<igx-tree [singleBranchExpand]=\"true\">\n...\n</igx-tree>\n```"
                        },
                        {
                            "kind": "text",
                            "text": "\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```typescript\nconst tree: IgxTree = this.tree;\nthis.tree.singleBranchExpand = false;\n```"
                        }
                    ]
                }
            },
            "animationSettings": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Get/Set the animation settings that branches should use when expanding/collpasing.\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```html\n<igx-tree [animationSettings]=\"customAnimationSettings\">\n</igx-tree>\n```"
                        },
                        {
                            "kind": "text",
                            "text": "\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```typescript\nconst animationSettings: ToggleAnimationSettings = {\n     openAnimation: growVerIn,\n     closeAnimation: growVerOut\n};\n\nthis.tree.animationSettings = animationSettings;\n```"
                        }
                    ]
                }
            },
            "nodeSelection": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Emitted when the node selection is changed through interaction\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```html\n<igx-tree (nodeSelection)=\"handleNodeSelection($event)\">\n</igx-tree>\n```"
                        },
                        {
                            "kind": "text",
                            "text": "\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```typescript\npublic handleNodeSelection(event: ITreeNodeSelectionEvent) {\n const newSelection: IgxTreeNode<any>[] = event.newSelection;\n const added: IgxTreeNode<any>[] = event.added;\n console.log(\"New selection will be: \", newSelection);\n console.log(\"Added nodes: \", event.added);\n}\n```"
                        }
                    ]
                }
            },
            "nodeExpanding": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Emitted when a node is expanding, before it finishes\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```html\n<igx-tree (nodeExpanding)=\"handleNodeExpanding($event)\">\n</igx-tree>\n```"
                        },
                        {
                            "kind": "text",
                            "text": "\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```typescript\npublic handleNodeExpanding(event: ITreeNodeTogglingEventArgs) {\n const expandedNode: IgxTreeNode<any> = event.node;\n if (expandedNode.disabled) {\n     event.cancel = true;\n }\n}\n```"
                        }
                    ]
                }
            },
            "nodeExpanded": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Emitted when a node is expanded, after it finishes\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```html\n<igx-tree (nodeExpanded)=\"handleNodeExpanded($event)\">\n</igx-tree>\n```"
                        },
                        {
                            "kind": "text",
                            "text": "\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```typescript\npublic handleNodeExpanded(event: ITreeNodeToggledEventArgs) {\n const expandedNode: IgxTreeNode<any> = event.node;\n console.log(\"Node is expanded: \", expandedNode.data);\n}\n```"
                        }
                    ]
                }
            },
            "nodeCollapsing": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Emitted when a node is collapsing, before it finishes\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```html\n<igx-tree (nodeCollapsing)=\"handleNodeCollapsing($event)\">\n</igx-tree>\n```"
                        },
                        {
                            "kind": "text",
                            "text": "\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```typescript\npublic handleNodeCollapsing(event: ITreeNodeTogglingEventArgs) {\n const collapsedNode: IgxTreeNode<any> = event.node;\n if (collapsedNode.alwaysOpen) {\n     event.cancel = true;\n }\n}\n```"
                        }
                    ]
                }
            },
            "nodeCollapsed": {
                "comment": {
                    "blockTags": [
                        {
                            "tag": "@例",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```html\n<igx-tree (nodeCollapsed)=\"handleNodeCollapsed($event)\">\n</igx-tree>\n```"
                                },
                                {
                                    "kind": "text",
                                    "text": "\n"
                                },
                                {
                                    "kind": "code",
                                    "text": "```typescript\npublic handleNodeCollapsed(event: ITreeNodeToggledEventArgs) {\n const collapsedNode: IgxTreeNode<any> = event.node;\n console.log(\"Node is collapsed: \", collapsedNode.data);\n}\n```"
                                }
                            ]
                        }
                    ],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Emitted when a node is collapsed, after it finishes"
                        }
                    ]
                }
            },
            "activeNodeChanged": {
                "comment": {
                    "blockTags": [
                        {
                            "tag": "@例",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```\n<igx-tree (activeNodeChanged)=\"activeNodeChanged($event)\"></igx-tree>\n```"
                                }
                            ]
                        }
                    ],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Emitted when the active node is changed."
                        }
                    ]
                }
            },
            "expandIndicator": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "A custom template to be used for the expand indicator of nodes\n"
                        },
                        {
                            "kind": "code",
                            "text": "```html\n<igx-tree>\n <ng-template igxTreeExpandIndicator let-expanded>\n     <igx-icon>{{ expanded ? \"close_fullscreen\": \"open_in_full\"}}</igx-icon>\n </ng-template>\n</igx-tree>\n```"
                        }
                    ]
                }
            }
        },
        "methods": {
            "expandAll": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Expands all of the passed nodes.\nIf no nodes are passed, expands ALL nodes"
                        }
                    ]
                }
            },
            "collapseAll": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Collapses all of the passed nodes.\nIf no nodes are passed, collapses ALL nodes"
                        }
                    ]
                }
            },
            "deselectAll": {
                "comment": {
                    "blockTags": [
                        {
                            "tag": "@例",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```typescript\n const arr = [\n     this.tree.nodes.toArray()[0],\n     this.tree.nodes.toArray()[1]\n ];\n this.tree.deselectAll(arr);\n```"
                                }
                            ]
                        }
                    ],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Deselect all nodes if the nodes collection is empty. Otherwise, deselect the nodes in the nodes collection."
                        }
                    ]
                }
            },
            "findNodes": {
                "comment": {
                    "blockTags": [
                        {
                            "tag": "@備考",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "Default search compares the passed "
                                },
                                {
                                    "kind": "code",
                                    "text": "`searchTerm`"
                                },
                                {
                                    "kind": "text",
                                    "text": " against the node's "
                                },
                                {
                                    "kind": "code",
                                    "text": "`data`"
                                },
                                {
                                    "kind": "text",
                                    "text": " Input.\nWhen using "
                                },
                                {
                                    "kind": "code",
                                    "text": "`findNodes`"
                                },
                                {
                                    "kind": "text",
                                    "text": " w/o a "
                                },
                                {
                                    "kind": "code",
                                    "text": "`comparer`"
                                },
                                {
                                    "kind": "text",
                                    "text": ", make sure all nodes have "
                                },
                                {
                                    "kind": "code",
                                    "text": "`data`"
                                },
                                {
                                    "kind": "text",
                                    "text": " passed."
                                }
                            ]
                        },
                        {
                            "tag": "@returns",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "Array of nodes that match the search. "
                                },
                                {
                                    "kind": "code",
                                    "text": "`null`"
                                },
                                {
                                    "kind": "text",
                                    "text": " if no nodes are found.\n\n"
                                },
                                {
                                    "kind": "code",
                                    "text": "```html\n<igx-tree>\n    <igx-tree-node *ngFor=\"let node of data\" [data]=\"node\">\n         {{ node.label }}\n    </igx-tree-node>\n</igx-tree>\n```"
                                },
                                {
                                    "kind": "text",
                                    "text": "\n\n"
                                },
                                {
                                    "kind": "code",
                                    "text": "```typescript\npublic data: DataEntry[] = FETCHED_DATA;\n...\nconst matchedNodes: IgxTreeNode<DataEntry>[] = this.tree.findNodes<DataEntry>(searchTerm: data[5]);\n```"
                                },
                                {
                                    "kind": "text",
                                    "text": "\n\nUsing a custom comparer\n"
                                },
                                {
                                    "kind": "code",
                                    "text": "```typescript\npublic data: DataEntry[] = FETCHED_DATA;\n...\nconst comparer: IgxTreeSearchResolver = (data: any, node: IgxTreeNode<DataEntry>) {\n     return node.data.index % 2 === 0;\n}\nconst evenIndexNodes: IgxTreeNode<DataEntry>[] = this.tree.findNodes<DataEntry>(null, comparer);\n```"
                                }
                            ]
                        }
                    ],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Returns all of the nodes that match the passed searchTerm.\nAccepts a custom comparer function for evaluating the search term against the nodes."
                        }
                    ]
                }
            }
        },
        "accessors": {
            "selection": {
                "getter": {
                    "comment": {
                        "blockTags": [
                            {
                                "tag": "@備考",
                                "content": [
                                    {
                                        "kind": "text",
                                        "text": "By default the tree selection mode is 'None'"
                                    }
                                ]
                            }
                        ],
                        "modifierTags": {},
                        "summary": [
                            {
                                "kind": "text",
                                "text": "Gets/Sets tree selection mode"
                            }
                        ]
                    }
                }
            },
            "rootNodes": {
                "getter": {
                    "comment": {
                        "blockTags": [],
                        "modifierTags": {},
                        "summary": [
                            {
                                "kind": "text",
                                "text": "Returns all **root level** nodes\n\n"
                            },
                            {
                                "kind": "code",
                                "text": "```typescript\nconst tree: IgxTree = this.tree;\nconst rootNodes: IgxTreeNodeComponent<any>[] = tree.rootNodes;\n```"
                            }
                        ]
                    }
                }
            },
            "displayDensity": {
                "getter": {
                    "comment": {
                        "blockTags": [],
                        "modifierTags": {},
                        "summary": [
                            {
                                "kind": "text",
                                "text": "コンポーネントのテーマを返します。\nデフォルト テーマは "
                            },
                            {
                                "kind": "code",
                                "text": "`comfortable`"
                            },
                            {
                                "kind": "text",
                                "text": "。\n利用可能なオプションは "
                            },
                            {
                                "kind": "code",
                                "text": "`comfortable`"
                            },
                            {
                                "kind": "text",
                                "text": "、"
                            },
                            {
                                "kind": "code",
                                "text": "`cosy`"
                            },
                            {
                                "kind": "text",
                                "text": "、"
                            },
                            {
                                "kind": "code",
                                "text": "`compact` です"
                            },
                            {
                                "kind": "text",
                                "text": "。\n"
                            },
                            {
                                "kind": "code",
                                "text": "```typescript\nlet componentTheme = this.component.displayDensity;\n```"
                            }
                        ]
                    }
                },
                "setter": {
                    "comment": {
                        "blockTags": [],
                        "modifierTags": {},
                        "summary": [
                            {
                                "kind": "text",
                                "text": "コンポーネントのテーマを設定します。"
                            }
                        ]
                    }
                }
            }
        }
    }
}