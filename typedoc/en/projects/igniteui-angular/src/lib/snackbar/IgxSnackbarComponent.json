{
    "IgxSnackbarComponent": {
        "comment": {
            "blockTags": [],
            "modifierTags": {},
            "summary": [
                {
                    "kind": "text",
                    "text": "**Ignite UI for Angular Snackbar** -\n[Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/snackbar.html)\n\nThe Ignite UI Snack Bar provides feedback about an operation with a single-line message, which can\ninclude a link to an action such as Undo.\n\nExample:\n"
                },
                {
                    "kind": "code",
                    "text": "```html\n<button (click)=\"snackbar.show()\">Send message</button>\n<div>\n  <igx-snackbar #snackbar>\n     Message sent\n  </igx-snackbar>\n</div>\n```"
                }
            ]
        },
        "properties": {
            "id": {
                "comment": {
                    "blockTags": [
                        {
                            "tag": "@memberof",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "IgxSnackbarComponent"
                                }
                            ]
                        }
                    ],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Sets/gets the "
                        },
                        {
                            "kind": "code",
                            "text": "`id`"
                        },
                        {
                            "kind": "text",
                            "text": " of the snackbar.\nIf not set, the "
                        },
                        {
                            "kind": "code",
                            "text": "`id`"
                        },
                        {
                            "kind": "text",
                            "text": " of the first snackbar component  will be "
                        },
                        {
                            "kind": "code",
                            "text": "`\"igx-snackbar-0\"`"
                        },
                        {
                            "kind": "text",
                            "text": ";\n"
                        },
                        {
                            "kind": "code",
                            "text": "```html\n<igx-snackbar id = \"Snackbar1\"></igx-snackbar>\n```"
                        },
                        {
                            "kind": "text",
                            "text": "\n"
                        },
                        {
                            "kind": "code",
                            "text": "```typescript\nlet snackbarId = this.snackbar.id;\n```"
                        }
                    ]
                }
            },
            "actionText": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Sets/gets the "
                        },
                        {
                            "kind": "code",
                            "text": "`actionText`"
                        },
                        {
                            "kind": "text",
                            "text": " attribute.\n"
                        },
                        {
                            "kind": "code",
                            "text": "```html\n<igx-snackbar [actionText] = \"'Action Text'\"></igx-snackbar>\n```"
                        }
                    ]
                }
            },
            "clicked": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "An event that will be emitted when the action button is clicked.\nProvides reference to the "
                        },
                        {
                            "kind": "code",
                            "text": "`IgxSnackbarComponent`"
                        },
                        {
                            "kind": "text",
                            "text": " as an argument.\n"
                        },
                        {
                            "kind": "code",
                            "text": "```html\n<igx-snackbar (clicked)=\"clickedHandler($event)\"></igx-snackbar>\n```"
                        }
                    ]
                }
            },
            "animationStarted": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "An event that will be emitted when the snackbar animation starts.\nProvides reference to the "
                        },
                        {
                            "kind": "code",
                            "text": "`ToggleViewEventArgs`"
                        },
                        {
                            "kind": "text",
                            "text": " interface as an argument.\n"
                        },
                        {
                            "kind": "code",
                            "text": "```html\n<igx-snackbar (animationStarted) = \"animationStarted($event)\"></igx-snackbar>\n```"
                        }
                    ]
                }
            },
            "animationDone": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "An event that will be emitted when the snackbar animation ends.\nProvides reference to the "
                        },
                        {
                            "kind": "code",
                            "text": "`ToggleViewEventArgs`"
                        },
                        {
                            "kind": "text",
                            "text": " interface as an argument.\n"
                        },
                        {
                            "kind": "code",
                            "text": "```html\n<igx-snackbar (animationDone) = \"animationDone($event)\"></igx-snackbar>\n```"
                        }
                    ]
                }
            },
            "ariaLive": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Sets/gets the "
                        },
                        {
                            "kind": "code",
                            "text": "`aria-live`"
                        },
                        {
                            "kind": "text",
                            "text": " attribute.\nIf not set, "
                        },
                        {
                            "kind": "code",
                            "text": "`aria-live`"
                        },
                        {
                            "kind": "text",
                            "text": " will have value "
                        },
                        {
                            "kind": "code",
                            "text": "`\"polite\"`"
                        },
                        {
                            "kind": "text",
                            "text": "."
                        }
                    ]
                }
            },
            "autoHide": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Sets/gets whether the element will be hidden after the "
                        },
                        {
                            "kind": "code",
                            "text": "`displayTime`"
                        },
                        {
                            "kind": "text",
                            "text": " is over.\nDefault value is "
                        },
                        {
                            "kind": "code",
                            "text": "`true`"
                        },
                        {
                            "kind": "text",
                            "text": "."
                        }
                    ]
                }
            },
            "displayTime": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Sets/gets the duration of time span (in milliseconds) which the element will be visible\nafter it is being shown.\nDefault value is "
                        },
                        {
                            "kind": "code",
                            "text": "`4000`"
                        },
                        {
                            "kind": "text",
                            "text": "."
                        }
                    ]
                }
            },
            "outlet": {
                "comment": {
                    "blockTags": [
                        {
                            "tag": "@remarks",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "`outlet`"
                                },
                                {
                                    "kind": "text",
                                    "text": " is an instance of "
                                },
                                {
                                    "kind": "code",
                                    "text": "`IgxOverlayOutletDirective`"
                                },
                                {
                                    "kind": "text",
                                    "text": " or an "
                                },
                                {
                                    "kind": "code",
                                    "text": "`ElementRef`"
                                },
                                {
                                    "kind": "text",
                                    "text": "."
                                }
                            ]
                        }
                    ],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets/Sets the container used for the element."
                        }
                    ]
                }
            },
            "opened": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Emits an event after the toggle container is opened.\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```typescript\nonToggleOpened(event) {\n   alert(\"Toggle opened!\");\n}\n```"
                        },
                        {
                            "kind": "text",
                            "text": "\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```html\n<div\n  igxToggle\n  (onOpened)='onToggleOpened($event)'>\n</div>\n```"
                        }
                    ]
                }
            },
            "opening": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Emits an event before the toggle container is opened.\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```typescript\nonToggleOpening(event) {\n alert(\"Toggle opening!\");\n}\n```"
                        },
                        {
                            "kind": "text",
                            "text": "\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```html\n<div\n  igxToggle\n  (onOpening)='onToggleOpening($event)'>\n</div>\n```"
                        }
                    ]
                }
            },
            "closed": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Emits an event after the toggle container is closed.\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```typescript\nonToggleClosed(event) {\n alert(\"Toggle closed!\");\n}\n```"
                        },
                        {
                            "kind": "text",
                            "text": "\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```html\n<div\n  igxToggle\n  (onClosed)='onToggleClosed($event)'>\n</div>\n```"
                        }
                    ]
                }
            },
            "closing": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Emits an event before the toggle container is closed.\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```typescript\nonToggleClosing(event) {\n alert(\"Toggle closing!\");\n}\n```"
                        },
                        {
                            "kind": "text",
                            "text": "\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```html\n<div\n igxToggle\n (closing)='onToggleClosing($event)'>\n</div>\n```"
                        }
                    ]
                }
            },
            "appended": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Emits an event after the toggle element is appended to the overlay container.\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```typescript\nonAppended() {\n alert(\"Content appended!\");\n}\n```"
                        },
                        {
                            "kind": "text",
                            "text": "\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```html\n<div\n  igxToggle\n  (onAppended)='onToggleAppended()'>\n</div>\n```"
                        }
                    ]
                }
            }
        },
        "methods": {
            "open": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Shows the snackbar and hides it after the "
                        },
                        {
                            "kind": "code",
                            "text": "`displayTime`"
                        },
                        {
                            "kind": "text",
                            "text": " is over if "
                        },
                        {
                            "kind": "code",
                            "text": "`autoHide`"
                        },
                        {
                            "kind": "text",
                            "text": " is set to "
                        },
                        {
                            "kind": "code",
                            "text": "`true`"
                        },
                        {
                            "kind": "text",
                            "text": ".\n"
                        },
                        {
                            "kind": "code",
                            "text": "```typescript\nthis.snackbar.open();\n```"
                        }
                    ]
                }
            },
            "toggle": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Opens or closes the snackbar, depending on its current state.\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```typescript\nthis.snackbar.toggle();\n```"
                        }
                    ]
                }
            },
            "close": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Hides the element."
                        }
                    ]
                }
            },
            "reposition": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Repositions the toggle.\n"
                        },
                        {
                            "kind": "code",
                            "text": "```typescript\nthis.myToggle.reposition();\n```"
                        }
                    ]
                }
            },
            "setOffset": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Offsets the content along the corresponding axis by the provided amount"
                        }
                    ]
                }
            }
        },
        "accessors": {
            "positionSettings": {
                "getter": {
                    "comment": {
                        "blockTags": [],
                        "modifierTags": {},
                        "summary": [
                            {
                                "kind": "text",
                                "text": "Get the position and animation settings used by the snackbar.\n"
                            },
                            {
                                "kind": "code",
                                "text": "```typescript\n@ViewChild('snackbar', { static: true }) public snackbar: IgxSnackbarComponent;\nlet currentPosition: PositionSettings = this.snackbar.positionSettings\n```"
                            }
                        ]
                    }
                },
                "setter": {
                    "comment": {
                        "blockTags": [],
                        "modifierTags": {},
                        "summary": [
                            {
                                "kind": "text",
                                "text": "Set the position and animation settings used by the snackbar.\n"
                            },
                            {
                                "kind": "code",
                                "text": "```html\n<igx-snackbar [positionSettings]=\"newPositionSettings\"></igx-snackbar>\n```"
                            },
                            {
                                "kind": "text",
                                "text": "\n"
                            },
                            {
                                "kind": "code",
                                "text": "```typescript\nimport { slideInTop, slideOutBottom } from 'igniteui-angular';\n...\n@ViewChild('snackbar', { static: true }) public snackbar: IgxSnackbarComponent;\n public newPositionSettings: PositionSettings = {\n     openAnimation: useAnimation(slideInTop, { params: { duration: '1000ms', fromPosition: 'translateY(100%)'}}),\n     closeAnimation: useAnimation(slideOutBottom, { params: { duration: '1000ms', fromPosition: 'translateY(0)'}}),\n     horizontalDirection: HorizontalAlignment.Left,\n     verticalDirection: VerticalAlignment.Middle,\n     horizontalStartPoint: HorizontalAlignment.Left,\n     verticalStartPoint: VerticalAlignment.Middle,\n     minSize: { height: 100, width: 100 }\n };\nthis.snackbar.positionSettings = this.newPositionSettings;\n```"
                            }
                        ]
                    }
                }
            },
            "isVisible": {
                "getter": {
                    "comment": {
                        "blockTags": [],
                        "modifierTags": {},
                        "summary": [
                            {
                                "kind": "text",
                                "text": "Enables/Disables the visibility of the element.\nIf not set, the "
                            },
                            {
                                "kind": "code",
                                "text": "`isVisible`"
                            },
                            {
                                "kind": "text",
                                "text": " attribute will have value "
                            },
                            {
                                "kind": "code",
                                "text": "`false`"
                            },
                            {
                                "kind": "text",
                                "text": "."
                            }
                        ]
                    }
                }
            },
            "overlayId": {
                "getter": {
                    "comment": {
                        "blockTags": [],
                        "modifierTags": {},
                        "summary": [
                            {
                                "kind": "text",
                                "text": "Returns the id of the overlay the content is rendered in.\n"
                            },
                            {
                                "kind": "code",
                                "text": "```typescript\nthis.myToggle.overlayId;\n```"
                            }
                        ]
                    }
                }
            }
        }
    }
}