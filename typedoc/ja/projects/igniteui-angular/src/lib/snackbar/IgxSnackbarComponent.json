{
    "IgxSnackbarComponent": {
        "comment": {
            "tags": {},
            "text": [
                "Ignite UI Snack Bar コンポーネントは一行のメッセージで操作のフィードバックを提供します。元に戻すなどの操作へのリンクを追加できます。",
                "例:",
                "```html",
                "<button (click)=\"snackbar.show()\">Send message</button>",
                "<div>",
                "  <igx-snackbar #snackbar>",
                "     Message sent",
                "  </igx-snackbar>",
                "</div>",
                "```"
            ],
            "shortText": [
                "**Ignite UI for Angular Snackbar** -",
                "[ヘルプ](https://jp.infragistics.com/products/ignite-ui-angular/angular/components/snackbar.html)"
            ]
        },
        "properties": {
            "id": {
                "comment": {
                    "tags": {
                        "memberof": {
                            "comment": {
                                "text": "IgxSnackbarComponent",
                                "tagName": "次のメンバー:"
                            }
                        }
                    },
                    "shortText": [
                        "snackbar の `id` を取得または設定します。",
						"設定しない場合、最初の snackbar コンポーネントの `id` は `\"igx-snackbar-0\"` になります。",
                        "```html",
                        "<igx-snackbar id = \"Snackbar1\"></igx-snackbar>",
                        "```",
                        "```typescript",
                        "let snackbarId = this.snackbar.id;",
                        "```"
                    ]
                }
            },
            "actionText": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "`actionText` 属性を取得または設定します。",
                        "```html",
                        "<igx-snackbar [actionText] = \"'Action Text'\"></igx-snackbar>",
                        "```"
                    ]
                }
            },
            "clicked": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "アクション ボタンがクリックされたときに発行されるイベント。",
                        "引数として `IgxSnackbarComponent` への参照を提供します。",
                        "```html",
                        "<igx-snackbar (clicked)=\"clickedHandler($event)\"></igx-snackbar>",
                        "```"
                    ]
                }
            },
            "animationStarted": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "スナックバーのアニメーションが開始するときに発生されるイベント。",
                        "引数として `ToggleViewEventArgs` インターフェイスへの参照を提供します。",
                        "```html",
                        "<igx-snackbar (animationStarted) = \"animationStarted($event)\"></igx-snackbar>",
                        "```"
                    ]
                }
            },
            "animationDone": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "スナックバーのアニメーションが完了するときに発生されるイベント。",
                        "引数として `ToggleViewEventArgs` インターフェイスへの参照を提供します。",
                        "```html",
                        "<igx-snackbar (animationDone) = \"animationDone($event)\"></igx-snackbar>",
                        "```"
                    ]
                }
            },
            "ariaLive": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "`aria-live` 属性を設定または取得します。",
                        "設定されない場合、`aria-live` の値は `\"polite\"` となります。"
                    ]
                }
            },
            "autoHide": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "要素が `displayTime` の終了後に非表示になるかどうかを取得または設定します。",
                        "デフォルト値は `true` です。"
                    ]
                }
            },
            "displayTime": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "表示された後、要素が表示される期間 (ミリ行)",
                        " を取得または設定します。",
                        "デフォルト値は `4000` です。"
                    ]
                }
            },
            "outlet": {
                "comment": {
                    "tags": {
                        "remarks": {
                            "comment": {
                                "text": " `outlet` は、`IgxOverlayOutletDirective` または `ElementRef` のインスタンスです。",
                                "tagName": "備考:"
                            }
                        }
                    },
                    "shortText": "要素に使用されるコンテナーを取得または設定します。"
                }
            },
            "opened": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```typescript",
                        "onToggleOpened(event) {",
                        "   alert(\"Toggle opened!\");",
                        "}",
                        "```",
                        "```html",
                        "<div",
                        "  igxToggle",
                        "  (onOpened)='onToggleOpened($event)'>",
                        "</div>",
                        "```"
                    ],
                    "shortText": "トグル コンテナーが開かれた後、イベントを発行します。"
                }
            },
            "opening": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```typescript",
                        "onToggleOpening(event) {",
                        " alert(\"Toggle opening!\");",
                        "}",
                        "```",
                        "```html",
                        "<div",
                        "  igxToggle",
                        "  (onOpening)='onToggleOpening($event)'>",
                        "</div>",
                        "```"
                    ],
                    "shortText": "トグル コンテナーが開いた前にイベントを発生します。"
                }
            },
            "closed": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```typescript",
                        "onToggleClosed(event) {",
                        " alert(\"Toggle closed!\");",
                        "}",
                        "```",
                        "```html",
                        "<div",
                        "  igxToggle",
                        "  (onClosed)='onToggleClosed($event)'>",
                        "</div>",
                        "```"
                    ],
                    "shortText": "トグル コンテナーが閉じた後にイベントを発生します。"
                }
            },
            "closing": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```typescript",
                        "onToggleClosing(event) {",
                        " alert(\"Toggle closing!\");",
                        "}",
                        "```",
                        "```html",
                        "<div",
                        " igxToggle",
                        " (closing)='onToggleClosing($event)'>",
                        "</div>",
                        "```"
                    ],
                    "shortText": "トグル コンテナーが閉じた前にイベントを発生します。"
                }
            },
            "appended": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```typescript",
                        "onAppended() {",
                        " alert(\"Content appended!\");",
                        "}",
                        "```",
                        "```html",
                        "<div",
                        "  igxToggle",
                        "  (onAppended)='onToggleAppended()'>",
                        "</div>",
                        "```"
                    ],
                    "shortText": "トグル要素がオーバーレイ コンテナーに追加された後にイベントを発生します。"
                }
            }
        },
        "methods": {
            "open": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "`autoHide` が `true` に設定されている場合、`displayTime` が終了した後にスナックバーを表示して非表示にします。",
                        "```typescript",
                        "this.snackbar.open();",
                        "```"
                    ]
                }
            },
            "toggle": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```typescript",
                        "this.snackbar.toggle();",
                        "```"
                    ],
                    "shortText": "現在状態によってスナックバーを開くまたは閉じます。"
                }
            },
            "close": {
                "comment": {
                    "tags": {},
                    "shortText": "要素を非表示にします。"
                }
            },
            "reposition": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "トグルを再配置します。",
                        "```typescript",
                        "this.myToggle.reposition();",
                        "```"
                    ]
                }
            },
            "setOffset": {
                "comment": {
                    "tags": {},
                    "shortText": "対応する軸に沿って指定した量のみコンテンツをオフセットします。"
                }
            }
        },
        "accessors": {
            "positionSettings": {
                "getter": {
                    "comment": {
                        "tags": {},
                        "shortText": [
                            "スナックバーで使用される位置とアニメーションの設定を取得します。",
                            "```typescript",
                            "@ViewChild('snackbar', { static: true }) public snackbar: IgxSnackbarComponent;",
                            "let currentPosition: PositionSettings = this.snackbar.positionSettings",
                            "```"
                        ]
                    }
                },
                "setter": {
                    "comment": {
                        "tags": {},
                        "shortText": [
                            "スナックバーで使用される位置とアニメーションの設定を設定します。",
                            "```html",
                            "<igx-snackbar [positionSettings]=\"newPositionSettings\"></igx-snackbar>",
                            "```",
                            "```typescript",
                            "import { slideInTop, slideOutBottom } from 'igniteui-angular';",
                            "...",
                            "@ViewChild('snackbar', { static: true }) public snackbar: IgxSnackbarComponent;",
                            " public newPositionSettings: PositionSettings = {",
                            "     openAnimation: useAnimation(slideInTop, { params: { duration: '1000ms', fromPosition: 'translateY(100%)'}}),",
                            "     closeAnimation: useAnimation(slideOutBottom, { params: { duration: '1000ms', fromPosition: 'translateY(0)'}}),",
                            "     horizontalDirection: HorizontalAlignment.Left,",
                            "     verticalDirection: VerticalAlignment.Middle,",
                            "     horizontalStartPoint: HorizontalAlignment.Left,",
                            "     verticalStartPoint: VerticalAlignment.Middle,",
                            "     minSize: { height: 100, width: 100 }",
                            " };",
                            "this.snackbar.positionSettings = this.newPositionSettings;",
                            "```"
                        ]
                    }
                }
            },
            "isVisible": {
                "getter": {
                    "comment": {
                        "tags": {},
                        "shortText": [
                            "要素の表示状態を有効または無効にします。",
                            "設定されない場合、`isVisible` の値は `false` です。"
                        ]
                    }
                },
                "setter": {
                    "comment": {
                        "tags": {},
                        "shortText": [
                            "要素の表示状態を有効または無効にします。",
                            "設定されない場合、`isVisible` の値は `false` です。"
                        ]
                    }
                }
            },
            "overlayId": {
                "getter": {
                    "comment": {
                        "tags": {},
                        "shortText": [
                            "コンテンツが描画されるオーバーレイの ID を返します。",
                            "```typescript",
                            "this.myToggle.overlayId;",
                            "```"
                        ]
                    }
                }
            }
        }
    }
}