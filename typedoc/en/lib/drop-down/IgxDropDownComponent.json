{
    "IgxDropDownComponent": {
        "comment": {
            "text": [
                "The Ignite UI for Angular Drop Down displays a scrollable list of items which may be visually grouped and",
                "supports selection of a single item. Clicking or tapping an item selects it and closes the Drop Down",
                "Example:",
                "```html",
                "<igx-drop-down>",
                "  <igx-drop-down-item *ngFor=\"let item of items\" disabled={{item.disabled}} isHeader={{item.header}}>",
                "    {{ item.value }}",
                "  </igx-drop-down-item>",
                "</igx-drop-down>",
                "```"
            ],
            "shortText": [
                "**Ignite UI for Angular DropDown** -",
                "[Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/drop_down.html)"
            ]
        },
        "properties": {
            "onOpening": {
                "comment": {
                    "text": [
                        "```html",
                        "<igx-drop-down (onOpening)='handleOpening()'></igx-drop-down>",
                        "```"
                    ],
                    "shortText": "Emitted before the dropdown is opened"
                }
            },
            "onOpened": {
                "comment": {
                    "text": [
                        "```html",
                        "<igx-drop-down (onOpened)='handleOpened()'></igx-drop-down>",
                        "```"
                    ],
                    "shortText": "Emitted after the dropdown is opened"
                }
            },
            "onClosing": {
                "comment": {
                    "text": [
                        "```html",
                        "<igx-drop-down (onClosing)='handleClosing()'></igx-drop-down>",
                        "```"
                    ],
                    "shortText": "Emitted before the dropdown is closed"
                }
            },
            "onClosed": {
                "comment": {
                    "text": [
                        "```html",
                        "<igx-drop-down (onClosed)='handleClosed()'></igx-drop-down>",
                        "```"
                    ],
                    "shortText": "Emitted after the dropdown is closed"
                }
            },
            "allowItemsFocus": {
                "comment": {
                    "text": [
                        "Note: Keep that focus shift in mind when using the igxDropDownItemNavigation directive",
                        "and ensure it's placed either on each focusable item or a common ancestor to allow it to handle keyboard events.",
                        "```typescript",
                        "// get",
                        "let dropDownAllowsItemFocus = this.dropdown.allowItemsFocus;",
                        "```",
                        "```html",
                        "<!--set-->",
                        "<igx-drop-down [allowItemsFocus]='true'></igx-drop-down>",
                        "```"
                    ],
                    "shortText": [
                        "Gets/sets whether items take focus. Disabled by default.",
                        "When enabled, drop down items gain tab index and are focused when active -",
                        "this includes activating the selected item when opening the drop down and moving with keyboard navigation."
                    ]
                }
            },
            "onSelection": {
                "comment": {
                    "text": [
                        "```html",
                        "<igx-drop-down (onSelection)='handleSelection()'></igx-drop-down>",
                        "```"
                    ],
                    "shortText": "Emitted when item selection is changing, before the selection completes"
                }
            },
            "width": {
                "comment": {
                    "text": [
                        "```typescript",
                        "// get",
                        "let myDropDownCurrentWidth = this.dropdown.width;",
                        "```",
                        "```html",
                        "<!--set-->",
                        "<igx-drop-down [width]='160px'></igx-drop-down>",
                        "```"
                    ],
                    "shortText": " Gets/Sets the width of the drop down"
                }
            },
            "height": {
                "comment": {
                    "text": [
                        "```typescript",
                        "// get",
                        "let myDropDownCurrentHeight = this.dropdown.height;",
                        "```",
                        "```html",
                        "<!--set-->",
                        "<igx-drop-down [height]='400px'></igx-drop-down>",
                        "```"
                    ],
                    "shortText": "Gets/Sets the height of the drop down"
                }
            },
            "maxHeight": {
                "comment": {
                    "text": [
                        "```typescript",
                        "// get",
                        "let maxHeight = this.dropdown.maxHeight;",
                        "```",
                        "```html",
                        "<!--set-->",
                        "<igx-drop-down [maxHeight]='200px'></igx-drop-down>",
                        "```"
                    ],
                    "shortText": "Gets/Sets the drop down's container max height."
                }
            }
        },
        "methods": {
            "open": {
                "comment": {
                    "text": [
                        "```typescript",
                        "this.dropdown.open();",
                        "```"
                    ],
                    "shortText": "Opens the dropdown"
                }
            },
            "close": {
                "comment": {
                    "text": [
                        "```typescript",
                        "this.dropdown.close();",
                        "```"
                    ],
                    "shortText": "Closes the dropdown"
                }
            },
            "toggle": {
                "comment": {
                    "text": [
                        "```typescript",
                        "this.dropdown.toggle();",
                        "```"
                    ],
                    "shortText": "Toggles the dropdown"
                }
            },
            "setSelectedItem": {
                "comment": {
                    "parameters": {
                        "index": {
                            "comment": {
                                "text": "of the item to select; If the drop down uses *igxFor, pass the index in data"
                            }
                        }
                    },
                    "tags": {},
                    "shortText": "Select an item by index"
                }
            },
            "navigateItem": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "Navigates to the item on the specified index",
                        "If the data in the drop-down is virtualized, pass the index of the item in the virtualized data."
                    ]
                }
            },
            "onItemActionKey": {
                "comment": {
                    "shortText": "Keydown Handler"
                }
            }
        },
        "accessors": {
            "listId": {
                "getter": {
                    "comment": {
                        "shortText": "Id of the internal listbox of the drop down"
                    }
                }
            },
            "selectedItem": {
                "getter": {
                    "comment": {
                        "text": [
                            "```typescript",
                            "let currentItem = this.dropdown.selectedItem;",
                            "```"
                        ],
                        "shortText": "Get currently selected item"
                    }
                }
            },
            "collapsed": {
                "getter": {
                    "comment": {
                        "text": [
                            "```typescript",
                            "let isCollapsed = this.dropdown.collapsed;",
                            "```"
                        ],
                        "shortText": "Gets if the dropdown is collapsed"
                    }
                }
            },
            "items": {
                "getter": {
                    "comment": {
                        "text": [
                            "```typescript",
                            "let myDropDownItems = this.dropdown.items;",
                            "```"
                        ],
                        "shortText": "Get all non-header items"
                    }
                }
            },
            "headers": {
                "getter": {
                    "comment": {
                        "text": [
                            "```typescript",
                            "let myDropDownHeaderItems = this.dropdown.headers;",
                            "```"
                        ],
                        "shortText": "Get all header items"
                    }
                }
            },
            "element": {
                "getter": {
                    "comment": {
                        "text": [
                            "```typescript",
                            "let myDropDownElement = this.dropdown.element;",
                            "```"
                        ],
                        "shortText": "Get dropdown html element"
                    }
                }
            },
            "displayDensity": {
                "getter": {
                    "comment": {
                        "shortText": [
                            "Returns the theme of the component.",
                            "The default theme is `comfortable`.",
                            "Available options are `comfortable`, `cosy`, `compact`.",
                            "```typescript",
                            "let componentTheme = this.component.displayDensity;",
                            "```"
                        ]
                    }
                },
                "setter": {
                    "comment": {
                        "shortText": "Sets the theme of the component."
                    }
                }
            }
        }
    }
}