{
    "IgxTooltipDirective": {
        "comment": {
            "blockTags": [],
            "modifierTags": {},
            "summary": [
                {
                    "kind": "text",
                    "text": "**Ignite UI for Angular Tooltip** -\n[Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tooltip)\n\nThe Ignite UI for Angular Tooltip directive is used to mark an HTML element in the markup as one that should behave as a tooltip.\nThe tooltip is used in combination with the Ignite UI for Angular Tooltip Target by assigning the exported tooltip reference to the\nrespective target's selector property.\n\nExample:\n"
                },
                {
                    "kind": "code",
                    "text": "```html\n<button [igxTooltipTarget]=\"tooltipRef\">Hover me</button>\n<span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n```"
                }
            ]
        },
        "properties": {
            "context": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets/sets any tooltip related data.\nThe 'context' can be used for storing any information that is necessary\nto access when working with the tooltip.\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```typescript\n// get\nlet tooltipContext = this.tooltip.context;\n```"
                        },
                        {
                            "kind": "text",
                            "text": "\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```typescript\n// set\nthis.tooltip.context = \"Tooltip's context\";\n```"
                        }
                    ]
                }
            },
            "id": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Identifier for the tooltip.\nIf this is property is not explicitly set, it will be automatically generated.\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```typescript\nlet tooltipId = this.tooltip.id;\n```"
                        }
                    ]
                }
            },
            "opened": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Emits an event after the toggle container is opened.\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```typescript\nonToggleOpened(event) {\n   alert(\"Toggle opened!\");\n}\n```"
                        },
                        {
                            "kind": "text",
                            "text": "\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```html\n<div\n  igxToggle\n  (onOpened)='onToggleOpened($event)'>\n</div>\n```"
                        }
                    ]
                }
            },
            "opening": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Emits an event before the toggle container is opened.\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```typescript\nonToggleOpening(event) {\n alert(\"Toggle opening!\");\n}\n```"
                        },
                        {
                            "kind": "text",
                            "text": "\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```html\n<div\n  igxToggle\n  (onOpening)='onToggleOpening($event)'>\n</div>\n```"
                        }
                    ]
                }
            },
            "closed": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Emits an event after the toggle container is closed.\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```typescript\nonToggleClosed(event) {\n alert(\"Toggle closed!\");\n}\n```"
                        },
                        {
                            "kind": "text",
                            "text": "\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```html\n<div\n  igxToggle\n  (onClosed)='onToggleClosed($event)'>\n</div>\n```"
                        }
                    ]
                }
            },
            "closing": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Emits an event before the toggle container is closed.\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```typescript\nonToggleClosing(event) {\n alert(\"Toggle closing!\");\n}\n```"
                        },
                        {
                            "kind": "text",
                            "text": "\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```html\n<div\n igxToggle\n (closing)='onToggleClosing($event)'>\n</div>\n```"
                        }
                    ]
                }
            },
            "appended": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Emits an event after the toggle element is appended to the overlay container.\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```typescript\nonAppended() {\n alert(\"Content appended!\");\n}\n```"
                        },
                        {
                            "kind": "text",
                            "text": "\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```html\n<div\n  igxToggle\n  (onAppended)='onToggleAppended()'>\n</div>\n```"
                        }
                    ]
                }
            }
        },
        "methods": {
            "open": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Opens the toggle.\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```typescript\nthis.myToggle.open();\n```"
                        }
                    ]
                }
            },
            "close": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Closes the toggle.\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```typescript\nthis.myToggle.close();\n```"
                        }
                    ]
                }
            },
            "toggle": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Opens or closes the toggle, depending on its current state.\n\n"
                        },
                        {
                            "kind": "code",
                            "text": "```typescript\nthis.myToggle.toggle();\n```"
                        }
                    ]
                }
            },
            "reposition": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Repositions the toggle.\n"
                        },
                        {
                            "kind": "code",
                            "text": "```typescript\nthis.myToggle.reposition();\n```"
                        }
                    ]
                }
            },
            "setOffset": {
                "comment": {
                    "blockTags": [],
                    "modifierTags": {},
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Offsets the content along the corresponding axis by the provided amount"
                        }
                    ]
                }
            }
        },
        "accessors": {
            "role": {
                "getter": {
                    "comment": {
                        "blockTags": [],
                        "modifierTags": {},
                        "summary": [
                            {
                                "kind": "text",
                                "text": "Get the role attribute of the tooltip.\n\n"
                            },
                            {
                                "kind": "code",
                                "text": "```typescript\nlet tooltipRole = this.tooltip.role;\n```"
                            }
                        ]
                    }
                }
            },
            "overlayId": {
                "getter": {
                    "comment": {
                        "blockTags": [],
                        "modifierTags": {},
                        "summary": [
                            {
                                "kind": "text",
                                "text": "Returns the id of the overlay the content is rendered in.\n"
                            },
                            {
                                "kind": "code",
                                "text": "```typescript\nthis.myToggle.overlayId;\n```"
                            }
                        ]
                    }
                }
            }
        }
    }
}