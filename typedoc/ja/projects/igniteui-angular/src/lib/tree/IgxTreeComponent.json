{
    "IgxTreeComponent": {
        "properties": {
            "singleBranchExpand": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```html",
                        "<igx-tree [singleBranchExpand]=\"true\">",
                        "...",
                        "</igx-tree>",
                        "```",
                        "```typescript",
                        "const tree: IgxTree = this.tree;",
                        "this.tree.singleBranchExpand = false;",
                        "```"
                    ],
                    "shortText": [
                        "ツリーがブランチ展開を処理する方法を取得または設定します。",
                        "`true` に設定すると、一度に展開できるブランチは 1 つのみで、その他のブランチはすべて縮小されます。"
                    ]
                }
            },
            "animationSettings": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```html",
                        "<igx-tree [animationSettings]=\"customAnimationSettings\">",
                        "</igx-tree>",
                        "```",
                        "```typescript",
                        "const animationSettings: ToggleAnimationSettings = {",
                        "     openAnimation: growVerIn,",
                        "     closeAnimation: growVerOut",
                        "};",
                        "this.tree.animationSettings = animationSettings;",
                        "```"
                    ],
                    "shortText": "ブランチが展開/折りたたみ時に使用するアニメーション設定を取得/設定します。"
                }
            },
            "nodeSelection": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```html",
                        "<igx-tree (nodeSelection)=\"handleNodeSelection($event)\">",
                        "</igx-tree>",
                        "```",
                        "```typescript",
                        "public handleNodeSelection(event: ITreeNodeSelectionEvent) {",
                        " const newSelection: IgxTreeNode<any>[] = event.newSelection;",
                        " const added: IgxTreeNode<any>[] = event.added;",
                        " console.log(\"New selection will be: \", newSelection);",
                        " console.log(\"Added nodes: \", event.added);",
                        "}",
                        "```"
                    ],
                    "shortText": "ノードの選択が操作によって変更されたときに発生されます。"
                }
            },
            "nodeExpanding": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```html",
                        "<igx-tree (nodeExpanding)=\"handleNodeExpanding($event)\">",
                        "</igx-tree>",
                        "```",
                        "```typescript",
                        "public handleNodeExpanding(event: ITreeNodeTogglingEventArgs) {",
                        " const expandedNode: IgxTreeNode<any> = event.node;",
                        " if (expandedNode.disabled) {",
                        "     event.cancel = true;",
                        " }",
                        "}",
                        "```"
                    ],
                    "shortText": "ノードが展開するときに終了する前に発生します。"
                }
            },
            "nodeExpanded": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```html",
                        "<igx-tree (nodeExpanded)=\"handleNodeExpanded($event)\">",
                        "</igx-tree>",
                        "```",
                        "```typescript",
                        "public handleNodeExpanded(event: ITreeNodeToggledEventArgs) {",
                        " const expandedNode: IgxTreeNode<any> = event.node;",
                        " console.log(\"Node is expanded: \", expandedNode.data);",
                        "}",
                        "```"
                    ],
                    "shortText": "ノードが完了した後にノードが展開されたときに発生されます。"
                }
            },
            "nodeCollapsing": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```html",
                        "<igx-tree (nodeCollapsing)=\"handleNodeCollapsing($event)\">",
                        "</igx-tree>",
                        "```",
                        "```typescript",
                        "public handleNodeCollapsing(event: ITreeNodeTogglingEventArgs) {",
                        " const collapsedNode: IgxTreeNode<any> = event.node;",
                        " if (collapsedNode.alwaysOpen) {",
                        "     event.cancel = true;",
                        " }",
                        "}",
                        "```"
                    ],
                    "shortText": "ノードが縮小するときに終了する前に発生します。"
                }
            },
            "nodeCollapsed": {
                "comment": {
                    "tags": {
                        "example": {
                            "comment": {
                                "text": [
                                    "```html",
                                    "<igx-tree (nodeCollapsed)=\"handleNodeCollapsed($event)\">",
                                    "</igx-tree>",
                                    "```",
                                    "```typescript",
                                    "public handleNodeCollapsed(event: ITreeNodeToggledEventArgs) {",
                                    " const collapsedNode: IgxTreeNode<any> = event.node;",
                                    " console.log(\"Node is collapsed: \", collapsedNode.data);",
                                    "}",
                                    "```"
                                ],
                                "tagName": "例:"
                            }
                        }
                    },
                    "shortText": "ノードが完了した後にノードが縮小されたときに発生されます。"
                }
            },
            "activeNodeChanged": {
                "comment": {
                    "tags": {
                        "example": {
                            "comment": {
                                "text": [
                                    "```",
                                    "<igx-tree (activeNodeChanged)=\"activeNodeChanged($event)\"></igx-tree>",
                                    "```"
                                ],
                                "tagName": "例:"
                            }
                        }
                    },
                    "shortText": "アクティブなノードが変更されたときに発生します。"
                }
            },
            "expandIndicator": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "ノードの展開インジケーターに使用されるカスタム テンプレート",
                        "```html",
                        "<igx-tree>",
                        " <ng-template igxTreeExpandIndicator let-expanded>",
                        "     <igx-icon>{{ expanded ? \"close_fullscreen\": \"open_in_full\"}}</igx-icon>",
                        " </ng-template>",
                        "</igx-tree>",
                        "```"
                    ]
                }
            }
        },
        "methods": {
            "expandAll": {
                "comment": {
                    "parameters": {
                        "nodes": {
                            "comment": {
                                "shortText": [
                                    "展開するノード",
                                    "```typescript",
                                    "const targetNodes: IgxTreeNode<any> = this.tree.findNodes(true, (_data: any, node: IgxTreeNode<any>) => node.data.expandable);",
                                    "tree.expandAll(nodes);",
                                    "```"
                                ]
                            }
                        }
                    },
                    "tags": {},
                    "shortText": [
                        "渡されたすべてのノードを展開します。",
                        "渡されたノードがない場合、すべてのノードを展開します。"
                    ]
                }
            },
            "collapseAll": {
                "comment": {
                    "parameters": {
                        "nodes": {
                            "comment": {
                                "shortText": [
                                    "縮小されるノード",
                                    "```typescript",
                                    "const targetNodes: IgxTreeNode<any> = this.tree.findNodes(true, (_data: any, node: IgxTreeNode<any>) => node.data.collapsible);",
                                    "tree.collapseAll(nodes);",
                                    "```"
                                ]
                            }
                        }
                    },
                    "tags": {},
                    "shortText": [
                        "渡されたすべてのノードを縮小します。",
                        "渡されたノードがない場合、すべてのノードを縮小します。"
                    ]
                }
            },
            "deselectAll": {
                "comment": {
                    "tags": {
                        "example": {
                            "comment": {
                                "text": [
                                    "```typescript",
                                    " const arr = [",
                                    "     this.tree.nodes.toArray()[0],",
                                    "     this.tree.nodes.toArray()[1]",
                                    " ];",
                                    " this.tree.deselectAll(arr);",
                                    "```"
                                ],
                                "tagName": "例:"
                            }
                        }
                    },
                    "shortText": "ノード コレクションが空の場合、すべてのノードの選択を解除します。それ以外の場合は、ノード コレクションのノードを選択解除します。"
                }
            },
            "findNodes": {
                "comment": {
                    "returns": "検索に一致するノードの配列。ノードが見つからない場合は `null`。\n\n```html\n<igx-tree>\n    <igx-tree-node *ngFor=\"let node of data\" [data]=\"node\">\n         {{ node.label }}\n    </igx-tree-node>\n</igx-tree>\n```\n\n```typescript\npublic data: DataEntry[] = FETCHED_DATA;\n...\nconst matchedNodes: IgxTreeNode<DataEntry>[] = this.tree.findNodes<DataEntry>(searchTerm: data[5]);\n```\n\nUsing a custom comparer\n```typescript\npublic data: DataEntry[] = FETCHED_DATA;\n...\nconst comparer: IgxTreeSearchResolver = (data: any, node: IgxTreeNode<DataEntry>) {\n     return node.data.index % 2 === 0;\n}\nconst evenIndexNodes: IgxTreeNode<DataEntry>[] = this.tree.findNodes<DataEntry>(null, comparer);\n```\n",
                    "parameters": {
                        "searchTerm": {
                            "comment": {
                                "shortText": "検索されたノードのデータ"
                            }
                        },
                        "comparer": {
                            "comment": {
                                "shortText": "渡された `searchTerm` をすべてのノードに対して評価するカスタム比較関数。"
                            }
                        }
                    },
                    "tags": {
                        "remark": {
                            "comment": {
                                "text": [
                                    "デフォルトの検索では、渡された `searchTerm` をノードの `data` 入力と比較します。",
                                    "比較演算子なしで `findNodes` を使用する場合、すべてのノードに `data` が渡されることを確認してください。"
                                ],
                                "tagName": "備考:"
                            }
                        }
                    },
                    "shortText": [
                        "渡された searchTerm に一致するすべてのノードを返します。",
                        "ノードに対して検索語を評価するためのカスタム比較関数を受け入れます。"
                    ]
                }
            }
        },
        "accessors": {
            "selection": {
                "getter": {
                    "comment": {
                        "tags": {
                            "remarks": {
                                "comment": {
                                    "text": "デフォルトでは、ツリー選択モードは 'None' です。",
                                    "tagName": "備考:"
                                }
                            }
                        },
                        "shortText": "ツリー選択モードを取得または設定します。"
                    }
                },
                "setter": {
                    "comment": {
                        "tags": {
                            "remarks": {
                                "comment": {
                                    "text": "デフォルトでは、ツリー選択モードは 'None' です。",
                                    "tagName": "備考:"
                                }
                            }
                        },
                        "shortText": "ツリー選択モードを取得または設定します。"
                    }
                }
            },
            "rootNodes": {
                "getter": {
                    "comment": {
                        "tags": {},
                        "text": [
                            "```typescript",
                            "const tree: IgxTree = this.tree;",
                            "const rootNodes: IgxTreeNodeComponent<any>[] = tree.rootNodes;",
                            "```"
                        ],
                        "shortText": "すべての**ルート レベル** ノードを返します。"
                    }
                }
            },
            "displayDensity": {
                "getter": {
                    "comment": {
                        "tags": {},
                        "shortText": [
                            "コンポーネントのテーマを返します。",
                            "デフォルト テーマは `comfortable` です。",
                            "利用可能なオプションは `comfortable`、`cosy`、および `compact` です。",
                            "```typescript",
                            "let componentTheme = this.component.displayDensity;",
                            "```"
                        ]
                    }
                },
                "setter": {
                    "comment": {
                        "tags": {},
                        "shortText": "コンポーネントのテーマを設定します。"
                    }
                }
            }
        }
    }
}