{
    "IgxTimePickerComponent": {
        "properties": {
            "id": {
                "comment": {
                    "shortText": [
                        "An @Input property that sets the value of the `id` attribute.",
                        "```html",
                        "<igx-time-picker [id]=\"'igx-time-picker-5'\" format=\"h:mm tt\" ></igx-time-picker>",
                        "```"
                    ]
                }
            },
            "disabled": {
                "comment": {
                    "shortText": [
                        "An @Input property that allows you to disable the `igx-time-picker` component. By default `disabled` is set to false.",
                        "```html",
                        "<igx-time-picker [disabled]=\"'true'\" [vertical]=\"true\" format=\"h:mm tt\" ></igx-time-picker>",
                        "```"
                    ]
                }
            },
            "minValue": {
                "comment": {
                    "shortText": [
                        "An @Input property that allows you to set the `minValue` to limit the user input.",
                        "```html",
                        "public min: string = \"09:00\";",
                        " //..",
                        "<igx-time-picker format=\"HH:mm\" [vertical]=\"true\" [minValue]=\"min\"></igx-time-picker>",
                        "```"
                    ]
                }
            },
            "maxValue": {
                "comment": {
                    "shortText": [
                        "An @Input property that allows you to set the `maxValue` to limit the user input.",
                        "```html",
                        "public max: string = \"18:00\";",
                        " //..",
                        "<igx-time-picker format=\"HH:mm\" [vertical]=\"true\" [maxValue]=\"max\"></igx-time-picker>",
                        "```"
                    ]
                }
            },
            "isSpinLoop": {
                "comment": {
                    "shortText": [
                        "An @Input property that determines the spin behavior. By default `isSpinLoop` is set to true.",
                        "The minutes and hour spinning will wrap around by default.",
                        "```html",
                        "<igx-time-picker [isSpinLoop]=\"false\" id=\"time-picker\"></igx-time-picker>",
                        "```"
                    ]
                }
            },
            "vertical": {
                "comment": {
                    "shortText": [
                        "An @Input property that Gets/Sets the orientation of the `igxTimePicker`. By default `vertical` is set to false.",
                        "```html",
                        "<igx-time-picker [vertical]=\"true\" id=\"time-picker\"></igx-time-picker>",
                        "```"
                    ]
                }
            },
            "promptChar": {
                "comment": {
                    "tags": {
                        "memberof": {
                            "comment": {
                                "text": "IgxTimePickerComponent",
                                "tagName": "memberof"
                            }
                        }
                    },
                    "shortText": [
                        "Sets the character used to prompt the user for input.",
                        "Default value is \"'-'\".",
                        "```html",
                        "<igx-time-picker [promptChar] = \"'_'\">",
                        "```"
                    ]
                }
            },
            "mode": {
                "comment": {
                    "tags": {
                        "memberof": {
                            "comment": {
                                "text": "IgxTimePickerComponent",
                                "tagName": "memberof"
                            }
                        }
                    },
                    "shortText": [
                        "An @Input property that allows you to switch the interaction mode between",
                        "a dialog picker or dropdown with editable masked input.",
                        "Deafult is dialog picker.",
                        "```html",
                        "public mode = InteractionMode.DROPDOWN;",
                        " //..",
                        "<igx-time-picker [mode]=\"mode\"></igx-time-picker>",
                        "```"
                    ]
                }
            },
            "outlet": {
                "comment": {
                    "text": [
                        "```html",
                        "<div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>",
                        "//..",
                        "<igx-time-picker [outlet]=\"outlet\"></igx-time-picker>",
                        "//..",
                        "```",
                        "Where `outlet` is an instance of `IgxOverlayOutletDirective` or an `ElementRef`."
                    ],
                    "shortText": "Determines the container the popup element should be attached to."
                }
            },
            "onValueChanged": {
                "comment": {
                    "shortText": [
                        "Emitted when selection is made. The event contains the selected value. Returns {`oldValue`: `Date`, `newValue`: `Date`}.",
                        "```typescript",
                        "@ViewChild(\"toast\")",
                        "private toast: IgxToastComponent;",
                        "public onValueChanged(timepicker){",
                        "   this.toast.show()",
                        "}",
                        "//...",
                        "```",
                        "```html",
                        "<igx-time-picker (onValueChanged)=\"onValueChanged($event)\"></igx-time-picker>",
                        "<igx-toast #toast message=\"The value has been changed!\"></igx-toast>",
                        "```"
                    ]
                }
            },
            "onValidationFailed": {
                "comment": {
                    "shortText": [
                        "Emitted when an invalid value is being set. Returns {`timePicker`: `any`, `currentValue`: `Date`, `setThroughUI`: `boolean`}",
                        "```typescript",
                        "public min: string = \"09:00\";",
                        "public max: string = \"18:00\";",
                        "@ViewChild(\"toast\")",
                        "private toast: IgxToastComponent;",
                        "public onValidationFailed(timepicker){",
                        "   this.toast.show();",
                        "}",
                        "//...",
                        "```",
                        "```html",
                        "<igx-time-picker [minValue]=\"min\" [maxValue]=\"max\" (onValidationFailed)=\"onValidationFailed($event)\"></igx-time-picker>",
                        "<igx-toast #toast message=\"Value must be between 09:00 and 18:00!\"></igx-toast>",
                        "```"
                    ]
                }
            },
            "onOpened": {
                "comment": {
                    "shortText": "Emitted when a timePicker is opened."
                }
            },
            "onClosed": {
                "comment": {
                    "shortText": "Emitted when a timePicker is closed."
                }
            },
            "onClosing": {
                "comment": {
                    "shortText": "Emitted when a timePicker is being closed."
                }
            }
        },
        "methods": {
            "openDialog": {
                "comment": {
                    "parameters": {
                        "target": {
                            "comment": {
                                "text": [
                                    "HTMLElement - the target element to use for positioning the drop down container according to",
                                    "```html",
                                    "<igx-time-picker [value]=\"date\" mode=\"dropdown\" #retemplated>",
                                    "  <ng-template igxTimePickerTemplate let-openDialog=\"openDialog\"",
                                    "               let-displayTime=\"displayTime\">",
                                    "    <igx-input-group>",
                                    "      <input #dropDownTarget igxInput [value]=\"displayTime\" />",
                                    "      <igx-suffix (click)=\"openDialog(dropDownTarget)\">",
                                    "        <igx-icon>alarm</igx-icon>",
                                    "      </igx-suffix>",
                                    "    </igx-input-group>",
                                    "  </ng-template>",
                                    "</igx-time-picker>",
                                    "```"
                                ]
                            }
                        }
                    },
                    "tags": {},
                    "shortText": "opens the dialog."
                }
            },
            "scrollHourIntoView": {
                "comment": {
                    "parameters": {
                        "item": {
                            "comment": {
                                "text": "to be scrolled in view."
                            }
                        }
                    },
                    "tags": {},
                    "shortText": [
                        "Scrolls a hour item into view.",
                        "```typescript",
                        "scrhintoView(picker) {",
                        "picker.scrollHourIntoView('2');",
                        "}",
                        "```",
                        "```html",
                        "<igx-time-picker #picker format=\"h:mm tt\" (onOpen)=\"scrhintoView(picker)\"></igx-time-picker>",
                        "```"
                    ]
                }
            },
            "scrollMinuteIntoView": {
                "comment": {
                    "parameters": {
                        "item": {
                            "comment": {
                                "text": "to be scrolled in view."
                            }
                        }
                    },
                    "tags": {},
                    "shortText": [
                        "Scrolls a minute item into view.",
                        "```typescript",
                        "scrMintoView(picker) {",
                        "picker.scrollMinuteIntoView('3');",
                        "}",
                        "```",
                        "```html",
                        "<igx-time-picker #picker format=\"h:mm tt\" (onOpen)=\"scrMintoView(picker)\"></igx-time-picker>",
                        "```"
                    ]
                }
            },
            "scrollAmPmIntoView": {
                "comment": {
                    "parameters": {
                        "item": {
                            "comment": {
                                "text": "to be scrolled in view."
                            }
                        }
                    },
                    "tags": {},
                    "shortText": [
                        "Scrolls an ampm item into view.",
                        "```typescript",
                        "scrAmPmIntoView(picker) {",
                        "picker.scrollAmPmIntoView('PM');",
                        "}",
                        "```",
                        "```html",
                        "<igx-time-picker #picker format=\"h:mm tt\" (onOpen)=\"scrAmPmIntoView(picker)\"></igx-time-picker>",
                        "```"
                    ]
                }
            },
            "okButtonClick": {
                "comment": {
                    "shortText": [
                        "If current value is valid selects it, closes the dialog and returns true, otherwise returns false.",
                        "```html",
                        "<igx-dialog class=\"igx-time-picker__dialog-popup\" [rightButtonLabel]=\"okButtonLabel\" (onRightButtonSelect)=\"okButtonClick()\">",
                        "//..",
                        "</igx-dialog>",
                        "```"
                    ]
                }
            },
            "cancelButtonClick": {
                "comment": {
                    "shortText": [
                        "Closes the dialog without selecting the current value.",
                        "```html",
                        "<igx-dialog class=\"igx-time-picker__dialog-popup\" [leftButtonLabel]=\"cancelButtonLabel\" (onLeftButtonSelect)=\"cancelButtonClick()\">",
                        "//...",
                        "</igx-dialog>",
                        "```"
                    ]
                }
            },
            "hoursInView": {
                "comment": {
                    "shortText": [
                        "Returns an array of the hours currently in view.",
                        "```html",
                        "@ViewChild(\"MyChild\")",
                        "private picker: IgxTimePickerComponent;",
                        "ngAfterViewInit(){",
                        "   let hInView = this.picker.hoursInView;",
                        "}",
                        "```"
                    ]
                }
            },
            "minutesInView": {
                "comment": {
                    "shortText": [
                        "Returns an array of the minutes currently in view.",
                        "```html",
                        "@ViewChild(\"MyChild\")",
                        "private picker: IgxTimePickerComponent;",
                        "ngAfterViewInit(){",
                        "   let minInView = this.picker.minutesInView;",
                        "}",
                        "```"
                    ]
                }
            },
            "ampmInView": {
                "comment": {
                    "shortText": [
                        "Returns an array of the AM/PM currently in view.",
                        "```html",
                        "@ViewChild(\"MyChild\")",
                        "private picker: IgxTimePickerComponent;",
                        "ngAfterViewInit(){",
                        "   let ApInView = this.picker.ampmInView;",
                        "}",
                        "```"
                    ]
                }
            },
            "close": {
                "comment": {
                    "shortText": [
                        "Closes the dropdown/dialog.",
                        "```html",
                        "<igx-time-picker #timePicker></igx-time-picker>",
                        "```",
                        "```typescript",
                        "@ViewChild('timePicker', { read: IgxTimePickerComponent }) picker: IgxTimePickerComponent;",
                        "picker.close();",
                        "```"
                    ]
                }
            }
        },
        "accessors": {
            "value": {
                "setter": {
                    "comment": {
                        "shortText": [
                            "An accessor that allows you to set a time using the `value` input.",
                            "```html",
                            "public date: Date = new Date(Date.now());",
                            " //...",
                            "<igx-time-picker [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>",
                            "```"
                        ]
                    }
                },
                "getter": {
                    "comment": {
                        "shortText": [
                            "An accessor that returns the value of `igx-time-picker` component.",
                            "```html",
                            "@ViewChild(\"MyPick\")",
                            "public pick: IgxTimePickerComponent;",
                            "ngAfterViewInit(){",
                            "   let pickSelect = this.pick.value;",
                            "}",
                            "```"
                        ]
                    }
                }
            },
            "resourceStrings": {
                "setter": {
                    "comment": {
                        "shortText": [
                            "An accessor that sets the resource strings.",
                            "By default it uses EN resources."
                        ]
                    }
                },
                "getter": {
                    "comment": {
                        "shortText": "An accessor that returns the resource strings."
                    }
                }
            },
            "okButtonLabel": {
                "setter": {
                    "comment": {
                        "shortText": [
                            "An @Input property that renders OK button with custom text. By default `okButtonLabel` is set to OK.",
                            "```html",
                            "<igx-time-picker okButtonLabel='SET' [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>",
                            "```"
                        ]
                    }
                },
                "getter": {
                    "comment": {
                        "shortText": "An accessor that returns the label of ok button."
                    }
                }
            },
            "cancelButtonLabel": {
                "setter": {
                    "comment": {
                        "shortText": [
                            "An @Input property that renders cancel button with custom text.",
                            "By default `cancelButtonLabel` is set to Cancel.",
                            "```html",
                            "<igx-time-picker cancelButtonLabel='Exit' [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>",
                            "```"
                        ]
                    }
                },
                "getter": {
                    "comment": {
                        "shortText": "An accessor that returns the label of cancel button."
                    }
                }
            },
            "format": {
                "getter": {
                    "comment": {
                        "shortText": [
                            "An @Input property that Gets/Sets format of time while `igxTimePicker` does not have focus. <br>",
                            "By default `format` is set to hh:mm tt. <br>",
                            "List of time-flags: <br>",
                            "`h` : hours field in 12-hours format without leading zero <br>",
                            "`hh` : hours field in 12-hours format with leading zero <br>",
                            "`H` : hours field in 24-hours format without leading zero <br>",
                            "`HH` : hours field in 24-hours format with leading zero <br>",
                            "`m` : minutes field without leading zero <br>",
                            "`mm` : minutes field with leading zero <br>",
                            "`tt` : 2 character string which represents AM/PM field <br>",
                            "```html",
                            "<igx-time-picker format=\"HH:m\" id=\"time-picker\"></igx-time-picker>",
                            "```"
                        ]
                    }
                },
                "setter": {
                    "comment": {
                        "shortText": [
                            "An @Input property that Gets/Sets format of time while `igxTimePicker` does not have focus. <br>",
                            "By default `format` is set to hh:mm tt. <br>",
                            "List of time-flags: <br>",
                            "`h` : hours field in 12-hours format without leading zero <br>",
                            "`hh` : hours field in 12-hours format with leading zero <br>",
                            "`H` : hours field in 24-hours format without leading zero <br>",
                            "`HH` : hours field in 24-hours format with leading zero <br>",
                            "`m` : minutes field without leading zero <br>",
                            "`mm` : minutes field with leading zero <br>",
                            "`tt` : 2 character string which represents AM/PM field <br>",
                            "```html",
                            "<igx-time-picker format=\"HH:m\" id=\"time-picker\"></igx-time-picker>",
                            "```"
                        ]
                    }
                }
            },
            "overlaySettings": {
                "setter": {
                    "comment": {
                        "tags": {
                            "memberof": {
                                "comment": {
                                    "text": "IgxTimePickerComponent",
                                    "tagName": "memberof"
                                }
                            }
                        },
                        "shortText": [
                            "An @Input property that allows you to modify overlay positioning, interaction and scroll behavior.",
                            "```typescript",
                            "const settings: OverlaySettings = {",
                            "     closeOnOutsideClick: true,",
                            "     modal: false",
                            " }",
                            "```",
                            "---",
                            "```html",
                            "<igx-time-picker [overlaySettings]=\"settings\"></igx-time-picker>",
                            "```"
                        ]
                    }
                },
                "getter": {
                    "comment": {
                        "shortText": [
                            "An @Input property that allows you to modify overlay positioning, interaction and scroll behavior.",
                            "```typescript",
                            "const settings: OverlaySettings = {",
                            "     closeOnOutsideClick: true,",
                            "     modal: false",
                            " }",
                            "```",
                            "---",
                            "```html",
                            "<igx-time-picker [overlaySettings]=\"settings\"></igx-time-picker>",
                            "```"
                        ]
                    }
                }
            },
            "onOpen": {
                "getter": {
                    "comment": {
                        "tags": {
                            "deprecated": {
                                "comment": {
                                    "text": [
                                        "Use 'onOpened' instead.",
                                        "Emitted when a timePicker is being opened.",
                                        "```html",
                                        "@ViewChild(\"toast\")",
                                        "private toast: IgxToastComponent;",
                                        "public onOpen(timepicker){",
                                        "   this.toast.show();",
                                        "}",
                                        "//...",
                                        "```",
                                        "```html",
                                        "<igx-time-picker [minValue]=\"min\" [maxValue]=\"max\" (onOpen)=\"onOpen($event)\"></igx-time-picker>",
                                        "<igx-toast #toast message=\"The time picker has been opened!\"></igx-toast>",
                                        "```"
                                    ],
                                    "tagName": "deprecated"
                                }
                            }
                        }
                    }
                },
                "setter": {
                    "comment": {}
                }
            },
            "onClose": {
                "getter": {
                    "comment": {
                        "tags": {
                            "deprecated": {
                                "comment": {
                                    "text": [
                                        "Use 'onClosed' instead.",
                                        "Emitted when a timePicker is being closed."
                                    ],
                                    "tagName": "deprecated"
                                }
                            }
                        }
                    }
                },
                "setter": {
                    "comment": {}
                }
            },
            "displayTime": {
                "getter": {
                    "comment": {
                        "shortText": [
                            "Returns the current time formatted as string using the `format` option.",
                            "If there is no set time the return is an empty string.",
                            "```typescript",
                            "@ViewChild(\"MyChild\")",
                            "private picker: IgxTimePickerComponent;",
                            "ngAfterViewInit(){",
                            "   let time = this.picker.displayTime;",
                            "}",
                            "```"
                        ]
                    }
                }
            },
            "template": {
                "getter": {
                    "comment": {
                        "tags": {
                            "memberof": {
                                "comment": {
                                    "text": "IgxTimePickerComponent",
                                    "tagName": "memberof"
                                }
                            }
                        },
                        "shortText": [
                            "Gets the input group template.",
                            "```typescript",
                            "let template = this.template();",
                            "```"
                        ]
                    }
                }
            },
            "context": {
                "getter": {
                    "comment": {
                        "tags": {
                            "memberof": {
                                "comment": {
                                    "text": "IgxTimePickerComponent",
                                    "tagName": "memberof"
                                }
                            }
                        },
                        "shortText": "Gets the context passed to the input group template."
                    }
                }
            }
        }
    }
}