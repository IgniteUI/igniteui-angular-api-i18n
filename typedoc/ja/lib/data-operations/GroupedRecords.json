{
    "GroupedRecords": {
        "properties": {
            "length": {
                "comment": {
                    "shortText": "配列の長さを取得または設定します。配列に定義される要素のインデックス + 1 の数値です。"
                }
            }
        },
        "methods": {
            "toString": {
                "comment": {
                    "shortText": "配列の文字列表示を返します。"
                }
            },
            "toLocaleString": {
                "comment": {
                    "shortText": "配列の文字列表示を返します。要素が toLocalString メソッドを使用して文字列に変換されます。"
                }
            },
            "pop": {
                "comment": {
                    "shortText": "最後の要素を配列から削除して要素を返します。"
                }
            },
            "push": {
                "comment": {
                    "parameters": {
                        "items": {
                            "comment": {
                                "text": "Array の新しい要素。"
                            }
                        }
                    },
                    "tags": {},
                    "shortText": "新しい要素を配列に追加し、配列の新しい長さを返します。"
                }
            },
            "concat": {
                "comment": {
                    "parameters": {
                        "items": {
                            "comment": {
                                "text": "array1 の最後に追加する追加の項目のコレクション。"
                            }
                        }
                    },
                    "tags": {},
                    "shortText": "2 つ以上の配列を結合します。"
                }
            },
            "join": {
                "comment": {
                    "parameters": {
                        "separator": {
                            "comment": {
                                "text": "結果の String で要素を次の要素から区分する文字列です。使用しない場合、要素はコンマで区分します。"
                            }
                        }
                    },
                    "tags": {},
                    "shortText": "指定した文字列によって分割される配列のすべての要素を追加します。"
                }
            },
            "reverse": {
                "comment": {
                    "shortText": "配列の要素を反転します。"
                }
            },
            "shift": {
                "comment": {
                    "shortText": "最初の要素を配列から削除して要素を返します。"
                }
            },
            "slice": {
                "comment": {
                    "parameters": {
                        "start": {
                            "comment": {
                                "text": "配列の指定された部分の始点。"
                            }
                        },
                        "end": {
                            "comment": {
                                "text": "配列の指定された部分の終点。"
                            }
                        }
                    },
                    "tags": {},
                    "shortText": "配列のセクションを返します。"
                }
            },
            "sort": {
                "comment": {
                    "parameters": {
                        "compareFn": {
                            "comment": {
                                "text": "要素の順を決定する関数の名前。使用しない場合、要素は降順で ASCII 文字の順で並べ替えます。"
                            }
                        }
                    },
                    "tags": {},
                    "shortText": "配列を並べ替えます。"
                }
            },
            "splice": {
                "comment": {
                    "parameters": {
                        "start": {
                            "comment": {
                                "text": "要素の削除操作を開始する配列内の 0 から始まる場所。"
                            }
                        },
                        "deleteCount": {
                            "comment": {
                                "text": "削除する要素の数。"
                            }
                        },
                        "items": {
                            "comment": {
                                "text": "配列内の削除された要素の代わりに挿入される要素。"
                            }
                        }
                    },
                    "tags": {},
                    "shortText": "要素を配列から削除し、オプションに新しい要素を同じ場所に挿入します。削除した要素を返します。"
                }
            },
            "unshift": {
                "comment": {
                    "parameters": {
                        "items": {
                            "comment": {
                                "text": "配列の始点に挿入される要素。"
                            }
                        }
                    },
                    "tags": {},
                    "shortText": "新しい要素を配列の開始に挿入します。"
                }
            },
            "indexOf": {
                "comment": {
                    "parameters": {
                        "searchElement": {
                            "comment": {
                                "text": "配列内で検索する値。"
                            }
                        },
                        "fromIndex": {
                            "comment": {
                                "text": "検索を開始する配列インデックス。fromIndex を使用しない場合、検索は 0 から開始します。"
                            }
                        }
                    },
                    "tags": {},
                    "shortText": "配列で値の最初のインスタンス行のインデックスを返します。"
                }
            },
            "lastIndexOf": {
                "comment": {
                    "parameters": {
                        "searchElement": {
                            "comment": {
                                "text": "配列内で検索する値。"
                            }
                        },
                        "fromIndex": {
                            "comment": {
                                "text": "検索を開始する配列インデックス。fromIndex を使用しない場合、検索は配列の最後のインデックスから開始します。"
                            }
                        }
                    },
                    "tags": {},
                    "shortText": "配列で指定した値の最後のインスタンス行のインデックスを返します。"
                }
            },
            "every": {
                "comment": {
                    "parameters": {
                        "callbackfn": {
                            "comment": {
                                "text": "引数を 3 つまで許容する関数。callbackfn が false を返すか配列の最後に達するまで every メソッドは Array1 の各要素に callbackfn 関数を呼び出します。"
                            }
                        },
                        "thisArg": {
                            "comment": {
                                "text": "callbackfn 関数内でキーワードを参照するオブジェクト。thisArg を使用しない場合、undefined が値として使用されます。"
                            }
                        }
                    },
                    "tags": {},
                    "shortText": "配列のすべてのメンバーが指定したテストをパスするかどうかを決定します。"
                }
            },
            "some": {
                "comment": {
                    "parameters": {
                        "callbackfn": {
                            "comment": {
                                "text": "引数を 3 つまで許容する関数。callbackfn が false を返すか配列の最後に達するまで some メソッドは Array1 の各要素に callbackfn 関数を呼び出します。"
                            }
                        },
                        "thisArg": {
                            "comment": {
                                "text": "callbackfn 関数内でキーワードを参照するオブジェクト。 thisArg を使用しない場合、undefined が値として使用されます。"
                            }
                        }
                    },
                    "tags": {},
                    "shortText": "指定したコールバック関数が配列の任意の要素のために true を返すかどうかを決定します。"
                }
            },
            "forEach": {
                "comment": {
                    "parameters": {
                        "callbackfn": {
                            "comment": {
                                "text": "引数を 3 つまで許容する関数。forEach は配列の各要素に一度 callbackfn 関数を呼び出します。"
                            }
                        },
                        "thisArg": {
                            "comment": {
                                "text": "callbackfn 関数内でキーワードを参照するオブジェクト。thisArg を使用しない場合、undefined が値として使用されます。"
                            }
                        }
                    },
                    "tags": {},
                    "shortText": "指定した操作を配列で各要素に実行します。"
                }
            },
            "map": {
                "comment": {
                    "parameters": {
                        "callbackfn": {
                            "comment": {
                                "text": "引数を 3 つまで許容する関数。map メソッドは配列の各要素に一度 callbackfn 関数を呼び出します。"
                            }
                        },
                        "thisArg": {
                            "comment": {
                                "text": "callbackfn 関数内でキーワードを参照するオブジェクト。 thisArg を使用しない場合、undefined が値として使用されます。"
                            }
                        }
                    },
                    "tags": {},
                    "shortText": "定義したコールバック関数を配列の各要素に呼び出し、結果を含む配列を返します。"
                }
            },
            "filter": {
                "comment": {
                    "parameters": {
                        "callbackfn": {
                            "comment": {
                                "text": "引数を 3 つまで許容する関数。forEach は配列の各要素に一度 callbackfn 関数を呼び出します。filter は配列の各要素のため一度 callbackfn 関数を呼び出します。"
                            }
                        },
                        "thisArg": {
                            "comment": {
                                "text": "callbackfn 関数内でキーワードを参照するオブジェクト。 thisArg を使用しない場合、undefined が値として使用されます。"
                            }
                        }
                    },
                    "tags": {},
                    "shortText": "コールバック関数に指定した条件に合う配列の要素を返します。"
                }
            },
            "reduce": {
                "comment": {
                    "parameters": {
                        "callbackfn": {
                            "comment": {
                                "text": "引数を 4 つまで許容する関数。reduce メソッドは配列の各要素に一度 callbackfn 関数を呼び出します。"
                            }
                        },
                        "initialValue": {
                            "comment": {
                                "text": "initialValue を指定した場合、蓄積を開始する最初の値として使用されます。Callbackfn への最初の呼び出しは、この値を配列の値の代わりに引数として提供します。"
                            }
                        }
                    },
                    "tags": {},
                    "shortText": "指定したコールバック関数を配列のすべての要素に呼び出します。コールバック関数の戻り値は累積された結果で、コールバック関数への次の呼び出しの引数として提供されます。"
                }
            },
            "reduceRight": {
                "comment": {
                    "parameters": {
                        "callbackfn": {
                            "comment": {
                                "text": "引数を 4 つまで許容する関数。reduceRight メソッドは配列の各要素に一度 callbackfn 関数を呼び出します。"
                            }
                        },
                        "initialValue": {
                            "comment": {
                                "text": "initialValue を指定した場合、蓄積を開始する最初の値として使用されます。Callbackfn への最初の呼び出しは、この値を配列の値の代わりに引数として提供します。"
                            }
                        }
                    },
                    "tags": {},
                    "shortText": "指定したコールバック関数を降順で配列のすべての要素に呼び出します。コールバック関数の戻り値は累積された結果で、コールバック関数への次の呼び出しの引数として提供されます。"
                }
            },
            "find": {
                "comment": {
                    "parameters": {
                        "predicate": {
                            "comment": {
                                "text": [
                                    "Find は、昇順で述語が true を返すまで配列の各要素に述語を呼び出します。 要素が見つかった場合、find はただちに要素の値を返します。そうでない場合、find は undefine を返します。"
                                ]
                            }
                        },
                        "thisArg": {
                            "comment": {
                                "text": [
                                    "指定される場合、述語の各起動にこの値として使用されます。指定されない場合、undefined が使用されます。"
                                ]
                            }
                        }
                    },
                    "tags": {},
                    "shortText": [
                        "配列で最初の述語が true の要素の値を返します。ない場合に undefined を返します。"
                    ]
                }
            },
            "findIndex": {
                "comment": {
                    "parameters": {
                        "predicate": {
                            "comment": {
                                "text": [
                                    "Find は、昇順で述語が true を返すまで配列の各要素に述語を呼び出します。要素が見つかった場合、findIndex はただちに要素のインデックスを返します。そうでない場合、findIndex は -1 を返します。"
                                ]
                            }
                        },
                        "thisArg": {
                            "comment": {
                                "text": [
                                    "指定される場合、述語の各起動にこの値として使用されます。指定されない場合、undefined が使用されます。"
                                ]
                            }
                        }
                    },
                    "tags": {},
                    "shortText": [
                        "配列で最初の述語が true の要素のインデックスを返します。ない場合に -1 を返します。",
                        ""
                    ]
                }
            },
            "fill": {
                "comment": {
                    "parameters": {
                        "value": {
                            "comment": {
                                "text": "配列セクションをフィルするための値。"
                            }
                        },
                        "start": {
                            "comment": {
                                "text": [
                                    "フィルを開始するインデックス。Start が負数の場合、lenght+start (lenght は配列の長さ) として使用されます。"
                                ]
                            }
                        },
                        "end": {
                            "comment": {
                                "text": [
                                    "フィルを停止するインデックス。End が負数の場合、lenght+end として使用されます。"
                                ]
                            }
                        }
                    },
                    "tags": {},
                    "shortText": "開始および終了インデックスの間のセクションを値に設定した後に this オブジェクトを返します。"
                }
            },
            "copyWithin": {
                "comment": {
                    "parameters": {
                        "target": {
                            "comment": {
                                "text": [
                                    "Target は負数の場合、lenght+target (lenght は配列の長さです) として使用されます。"
                                ]
                            }
                        },
                        "start": {
                            "comment": {
                                "text": [
                                    "Start は負数の場合、lenght+start として使用されます。End が負数の場合、lenght+end として使用されます。"
                                ]
                            }
                        },
                        "end": {
                            "comment": {
                                "text": "指定されない場合、このオブジェクトの長さはデフォルト値として使用されます。"
                            }
                        }
                    },
                    "tags": {},
                    "shortText": [
                        "配列の開始および終了インデックスの間のセクションをコピーして同じ配列のターゲット位置に貼り付けた後に this オブジェクトを返します。"
                    ]
                }
            },
            "__@iterator": {
                "comment": {
                    "shortText": "反復子"
                }
            },
            "entries": {
                "comment": {
                    "shortText": "配列の各エントリのためにキーと値ペアの列挙子を返します。"
                }
            },
            "keys": {
                "comment": {
                    "shortText": "配列のキーの列挙子を返します。"
                }
            },
            "values": {
                "comment": {
                    "shortText": "配列の値の列挙子を返します。"
                }
            },
            "__@unscopables": {
                "comment": {
                    "shortText": [
                        "'with' ステートメントで使用されない場合に値が 'true' になるプロパティを持つオブジェクトを返します。"
                    ]
                }
            },
            "includes": {
                "comment": {
                    "parameters": {
                        "searchElement": {
                            "comment": {
                                "text": "検索する要素。"
                            }
                        },
                        "fromIndex": {
                            "comment": {
                                "text": "この配列内の searchElement の検索を開始する位置。"
                            }
                        }
                    },
                    "tags": {},
                    "shortText": "配列が特定の要素を含むかどうかを決定します。true または false を返します。"
                }
            }
        },
        "accessors": {}
    }
}
