{
    "IgxToastComponent": {
        "comment": {
            "tags": {},
            "text": [
                "Ignite UI Toast は、ユーザーが閉じられない非対話型の情報や報告メッセージを表示できます。",
                "Toast はページの下側、中央、または上側に表示できます。",
                "例:",
                "```html",
                "<button (click)=\"toast.open()\">Show notification</button>",
                "<igx-toast #toast displayTime=\"1000\">",
                "     Notification displayed",
                "</igx-toast>",
                "```"
            ],
            "shortText": [
                "**Ignite UI for Angular Toast** -",
                "[ヘルプ](https://jp.infragistics.com/products/ignite-ui-angular/angular/components/toast)"
            ]
        },
        "properties": {
            "id": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "トーストの `id` を取得または設定します。",
                        "設定されない場合、`id` の値は `\"igx-toast-0\"` になります。",
                        "```html",
                        "<igx-toast id = \"my-first-toast\"></igx-toast>",
                        "```",
                        "```typescript",
                        "let toastId = this.toast.id;",
                        "```"
                    ]
                }
            },
            "role": {
                "comment": {
                    "tags": {
                        "memberof": {
                            "comment": {
                                "text": "IgxToastComponent",
                                "tagName": "次のメンバー:"
                            }
                        }
                    },
                    "shortText": [
                        "`role` 属性を取得または設定します。",
                        "設定されない場合、`role` の値は `\"alert\"` です。",
                        "```html",
                        "<igx-toast [role] = \"'notify'\"></igx-toast>",
                        "```",
                        "```typescript",
                        "let toastRole = this.toast.role;",
                        "```"
                    ]
                }
            },
            "ariaLive": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "`aria-live` 属性を設定または取得します。",
                        "設定されない場合、`aria-live` の値は `\"polite\"` となります。"
                    ]
                }
            },
            "autoHide": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "要素が `displayTime` の終了後に非表示になるかどうかを取得または設定します。",
                        "デフォルト値は `true` です。"
                    ]
                }
            },
            "displayTime": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "表示された後、要素が表示される期間 (ミリ行)",
                        " を取得または設定します。",
                        "デフォルト値は `4000` です。"
                    ]
                }
            },
            "outlet": {
                "comment": {
                    "tags": {
                        "remarks": {
                            "comment": {
                                "text": " `outlet` は、`IgxOverlayOutletDirective` または `ElementRef` のインスタンスです。",
                                "tagName": "備考:"
                            }
                        }
                    },
                    "shortText": "要素に使用されるコンテナーを取得または設定します。"
                }
            },
            "opened": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```typescript",
                        "onToggleOpened(event) {",
                        "   alert(\"Toggle opened!\");",
                        "}",
                        "```",
                        "```html",
                        "<div",
                        "  igxToggle",
                        "  (onOpened)='onToggleOpened($event)'>",
                        "</div>",
                        "```"
                    ],
                    "shortText": "トグル コンテナーが開かれた後、イベントを発行します。"
                }
            },
            "opening": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```typescript",
                        "onToggleOpening(event) {",
                        " alert(\"Toggle opening!\");",
                        "}",
                        "```",
                        "```html",
                        "<div",
                        "  igxToggle",
                        "  (onOpening)='onToggleOpening($event)'>",
                        "</div>",
                        "```"
                    ],
                    "shortText": "トグル コンテナーが開いた前にイベントを発生します。"
                }
            },
            "closed": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```typescript",
                        "onToggleClosed(event) {",
                        " alert(\"Toggle closed!\");",
                        "}",
                        "```",
                        "```html",
                        "<div",
                        "  igxToggle",
                        "  (onClosed)='onToggleClosed($event)'>",
                        "</div>",
                        "```"
                    ],
                    "shortText": "トグル コンテナーが閉じた後にイベントを発生します。"
                }
            },
            "closing": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```typescript",
                        "onToggleClosing(event) {",
                        " alert(\"Toggle closing!\");",
                        "}",
                        "```",
                        "```html",
                        "<div",
                        " igxToggle",
                        " (closing)='onToggleClosing($event)'>",
                        "</div>",
                        "```"
                    ],
                    "shortText": "トグル コンテナーが閉じた前にイベントを発生します。"
                }
            },
            "appended": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```typescript",
                        "onAppended() {",
                        " alert(\"Content appended!\");",
                        "}",
                        "```",
                        "```html",
                        "<div",
                        "  igxToggle",
                        "  (onAppended)='onToggleAppended()'>",
                        "</div>",
                        "```"
                    ],
                    "shortText": "トグル要素がオーバーレイ コンテナーに追加された後にイベントを発生します。"
                }
            }
        },
        "methods": {
            "open": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```typescript",
                        "this.toast.open();",
                        "```"
                    ],
                    "shortText": [
                        "トーストを表示します。",
                        "`autoHide` が有効な場合、トーストは `displayTime` 終了後に非表示になります。"
                    ]
                }
            },
            "toggle": {
                "comment": {
                    "tags": {},
                    "text": [
                        "```typescript",
                        "this.toast.toggle();",
                        "```"
                    ],
                    "shortText": "現在状態によってトーストを開くまたは閉じます。"
                }
            },
            "close": {
                "comment": {
                    "tags": {},
                    "shortText": "要素を非表示にします。"
                }
            },
            "reposition": {
                "comment": {
                    "tags": {},
                    "shortText": [
                        "トグルを再配置します。",
                        "```typescript",
                        "this.myToggle.reposition();",
                        "```"
                    ]
                }
            },
            "setOffset": {
                "comment": {
                    "tags": {},
                    "shortText": "対応する軸に沿って指定した量のみコンテンツをオフセットします。"
                }
            }
        },
        "accessors": {
            "positionSettings": {
                "getter": {
                    "comment": {
                        "tags": {},
                        "shortText": [
                            "トーストで使用される位置とアニメーションの設定を取得します。",
                            "```typescript",
                            "@ViewChild('toast', { static: true }) public toast: IgxToastComponent;",
                            "let currentPosition: PositionSettings = this.toast.positionSettings",
                            "```"
                        ]
                    }
                },
                "setter": {
                    "comment": {
                        "tags": {},
                        "shortText": [
                            "トーストで使用される位置とアニメーションの設定を設定します。",
                            "```html",
                            "<igx-toast [positionSettings]=\"newPositionSettings\"></igx-toast>",
                            "```",
                            "```typescript",
                            "import { slideInTop, slideOutBottom } from 'igniteui-angular';",
                            "...",
                            "@ViewChild('toast', { static: true }) public toast: IgxToastComponent;",
                            " public newPositionSettings: PositionSettings = {",
                            "     openAnimation: useAnimation(slideInTop, { params: { duration: '1000ms', fromPosition: 'translateY(100%)'}}),",
                            "     closeAnimation: useAnimation(slideOutBottom, { params: { duration: '1000ms', fromPosition: 'translateY(0)'}}),",
                            "     horizontalDirection: HorizontalAlignment.Left,",
                            "     verticalDirection: VerticalAlignment.Middle,",
                            "     horizontalStartPoint: HorizontalAlignment.Left,",
                            "     verticalStartPoint: VerticalAlignment.Middle",
                            " };",
                            "this.toast.positionSettings = this.newPositionSettings;",
                            "```"
                        ]
                    }
                }
            },
            "element": {
                "getter": {
                    "comment": {
                        "tags": {
                            "memberof": {
                                "comment": {
                                    "text": "IgxToastComponent",
                                    "tagName": "次のメンバー:"
                                }
                            }
                        },
                        "shortText": [
                            "トーストの nativeElement を取得します。",
                            "```typescript",
                            "let nativeElement = this.toast.element;",
                            "```"
                        ]
                    }
                }
            },
            "isVisible": {
                "getter": {
                    "comment": {
                        "tags": {},
                        "shortText": [
                            "要素の表示状態を有効または無効にします。",
                            "設定されない場合、`isVisible` の値は `false` です。"
                        ]
                    }
                },
                "setter": {
                    "comment": {
                        "tags": {},
                        "shortText": [
                            "要素の表示状態を有効または無効にします。",
                            "設定されない場合、`isVisible` の値は `false` です。"
                        ]
                    }
                }
            },
            "overlayId": {
                "getter": {
                    "comment": {
                        "tags": {},
                        "shortText": [
                            "コンテンツが描画されるオーバーレイの ID を返します。",
                            "```typescript",
                            "this.myToggle.overlayId;",
                            "```"
                        ]
                    }
                }
            }
        }
    }
}