{
    "IgxIconComponent": {
        "properties": {
            "cssClass": {
                "comment": {
                    "shortText": [
                        " This allows you to change the value of `class.igx-icon`. By default it's `igx-icon`.",
                        "```typescript",
                        "@ViewChild(\"MyIcon\") public icon: IgxIconComponent;",
                        "constructor(private cdRef:ChangeDetectorRef) {}",
                        "ngAfterViewInit() {",
                        "   this.icon.cssClass = \"\";",
                        "   this.cdRef.detectChanges();",
                        "}",
                        "```"
                    ]
                }
            },
            "ariaHidden": {
                "comment": {
                    "shortText": [
                        " This allows you to disable the `aria-hidden` attribute. By default it's applied.",
                        "```typescript",
                        "@ViewChild(\"MyIcon\") public icon: IgxIconComponent;",
                        "constructor(private cdRef:ChangeDetectorRef) {}",
                        "ngAfterViewInit() {",
                        "   this.icon.ariaHidden = false;",
                        "   this.cdRef.detectChanges();",
                        "}",
                        "```"
                    ]
                }
            },
            "id": {
                "comment": {
                    "shortText": [
                        "   An @Input property that sets the value of the `id` attribute.",
                        "```html",
                        "<igx-icon id=\"igx-icon-1\" fontSet=\"material\" name=\"settings\" color=\"blue\" [isActive]=\"false\"></igx-icon>",
                        "```"
                    ]
                }
            },
            "font": {
                "comment": {
                    "shortText": [
                        "   An @Input property that sets the value of the `fontSet`. By default it's \"material\".",
                        "```html",
                        "<igx-icon fontSet=\"material\" name=\"settings\" color=\"blue\" [isActive]=\"false\"></igx-icon>",
                        "```"
                    ]
                }
            },
            "active": {
                "comment": {
                    "shortText": [
                        "   An @Input property that allows you to disable the `active` property. By default it's applied.",
                        "```html",
                        "<igx-icon [isActive]=\"false\" fontSet=\"material\" name=\"settings\" color=\"blue\"></igx-icon>",
                        "```"
                    ]
                }
            },
            "iconColor": {
                "comment": {
                    "shortText": [
                        "   An @Input property that allows you to change the `iconColor` of the icon.",
                        "```html",
                        "<igx-icon color=\"blue\" [isActive]=\"true\" fontSet=\"material\" name=\"settings\" ></igx-icon>",
                        "```"
                    ]
                }
            },
            "iconName": {
                "comment": {
                    "shortText": [
                        "   An @Input property that allows you to change the `iconName` of the icon.",
                        "   The `iconName` can be set using the `name`.",
                        "   You can provide either ligature `name` or glyph `iconName`, but not both at the same time.",
                        "```html",
                        "<igx-icon name=\"question_answer\" color=\"blue\" [isActive]=\"true\" fontSet=\"material\"></igx-icon>",
                        "```"
                    ]
                }
            },
            "glyphName": {
                "comment": {
                    "shortText": [
                        "   An @Input property that allows you to change the `glyphName` of the icon.",
                        "   The `glyphName` can be set using `iconName`.",
                        "   You can provide either ligature `name` or glyph `iconName`, but not both at the same time.",
                        "```html",
                        "<igx-icon iconName=\"question_answer\" color=\"blue\" [isActive]=\"true\" fontSet=\"material\"></igx-icon>",
                        "```"
                    ]
                }
            },
            "el": {
                "comment": {
                    "shortText": [
                        "An ElementRef property of the `igx-icon` component."
                    ]
                }
            }
        },
        "methods": {},
        "accessors": {
            "getFontSet": {
                "getter": {
                    "comment": {
                        "shortText": [
                            "  An accessor that returns the value of the font property.",
                            "```typescript",
                            "@ViewChild(\"MyIcon\")",
                            "public icon: IgxIconComponent;",
                            "ngAfterViewInit() {",
                            "   let iconFont = this.icon.getFontSet;",
                            "}",
                            "```"
                        ]
                    }
                }
            },
            "getActive": {
                "getter": {
                    "comment": {
                        "shortText": [
                            "  An accessor that returns the value of the active property.",
                            "```typescript",
                            "@ViewChild(\"MyIcon\")",
                            "public icon: IgxIconComponent;",
                            "ngAfterViewInit() {",
                            "   let iconActive = this.icon.getActive;",
                            "}",
                            "```"
                        ]
                    }
                }
            },
            "getInactive": {
                "getter": {
                    "comment": {
                        "shortText": [
                            "  An accessor that returns inactive property.",
                            "```typescript",
                            "@ViewChild(\"MyIcon\")",
                            "public icon: IgxIconComponent;",
                            "ngAfterViewInit() {",
                            "   let iconActive = this.icon.getInactive;",
                            "}",
                            "```"
                        ]
                    }
                }
            },
            "getIconColor": {
                "getter": {
                    "comment": {
                        "shortText": [
                            "  An accessor that returns the opposite value of the `iconColor` property.",
                            "```typescript",
                            "@ViewChild(\"MyIcon\")",
                            "public icon: IgxIconComponent;",
                            "ngAfterViewInit() {",
                            "   let iconColor = this.icon.getIconColor;",
                            "}",
                            "```"
                        ]
                    }
                }
            },
            "getIconName": {
                "getter": {
                    "comment": {
                        "shortText": [
                            "  An accessor that returns the value of the iconName property.",
                            "```typescript",
                            "@ViewChild(\"MyIcon\")",
                            "public icon: IgxIconComponent;",
                            "ngAfterViewInit() {",
                            "   let iconName = this.icon.getIconName;",
                            "}",
                            "```"
                        ]
                    }
                }
            },
            "template": {
                "getter": {
                    "comment": {
                        "shortText": [
                            "  An accessor that returns a TemplateRef to explicit, implicit or no ligature.",
                            "```typescript",
                            "@ViewChild(\"MyIcon\")",
                            "public icon: IgxIconComponent;",
                            "ngAfterViewInit() {",
                            "   let iconTemplate = this.icon.template;",
                            "}",
                            "```"
                        ]
                    }
                }
            }
        },
        "functions": {}
    }
}