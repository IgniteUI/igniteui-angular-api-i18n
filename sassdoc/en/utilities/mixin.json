{
    "hide-default": {
        "description": [
            "<p>Hides the element from the DOM.</p>",
            ""
        ],
        "example": [
            {
                "description": [
                    "<p>Sample usage</p>",
                    ""
                ],
                "code": [
                    "input[type=\"checkbox\"] {",
                    "  @include hide-default();",
                    "}"
                ]
            }
        ]
    },
    "linear-gradient": {
        "description": [
            "<p>Generates a linear gradient.</p>",
            ""
        ],
        "parameters": {
            "direction": {
                "description": [
                    "<p>The direction of the gradient.</p>",
                    ""
                ]
            },
            "color-stops": {
                "description": [
                    "<p>A list of color stops to be used in the gradient.</p>",
                    ""
                ]
            }
        },
        "example": [
            {
                "description": [
                    "<p>Sample usage</p>",
                    ""
                ],
                "code": [
                    ".bozo {",
                    "  background: @include linear-gradient(\"to right\", red, orange);",
                    "}"
                ]
            }
        ]
    },
    "ellipsis": {
        "description": [
            "<p>Applies text-overflow ellipsis to e text element.",
            "This won&#39;t work on display flex elements.</p>",
            ""
        ]
    },
    "palette-vars": {
        "description": [
            "<p>Generates CSS variables for a given palette.</p>",
            ""
        ],
        "parameters": {
            "palette": {
                "description": [
                    "<p>The palette to use to generate CSS variables for.</p>",
                    ""
                ]
            },
            "contrast": {
                "description": [
                    "<p>Specify if contrast colors should be included.</p>",
                    ""
                ]
            },
            "prefix": {
                "description": [
                    "<p>The prefix attached to the CSS variables.</p>",
                    ""
                ]
            }
        },
        "example": [
            {
                "description": [
                    "<p>Generate css variables for the <code>$default-palette</code>.</p>",
                    ""
                ],
                "code": [
                    "@include palette-vars($default-palette);"
                ]
            }
        ]
    },
    "palette-to-wc": {
        "description": [
            "<p>Translates Ignite UI for Angular palette CSS variables",
            "into Ignite UI for Web Components compatible ones</p>",
            ""
        ],
        "parameters": {
            "palette": {
                "description": [
                    "<p>The palette to use to generate CSS variables for.</p>",
                    ""
                ]
            }
        },
        "example": [
            {
                "description": [
                    "<p>Translates igx- prefixed variables from <code>$default-palette</code> to igc- prefixed ones.</p>",
                    ""
                ],
                "code": [
                    "@include palette-to-wc($default-palette);"
                ]
            }
        ]
    },
    "elevation-vars": {
        "description": [
            "<p>Generates CSS variables for a given elevations map.</p>",
            ""
        ],
        "parameters": {
            "elevations": {
                "description": [
                    "<p>The elevations map to use to generate CSS variables for.</p>",
                    ""
                ]
            },
            "prefix": {
                "description": [
                    "<p>The prefix attached to the CSS variables.</p>",
                    ""
                ]
            }
        },
        "example": [
            {
                "description": [
                    "<p>Generate CSS variables for elevations.</p>",
                    ""
                ],
                "code": [
                    "$elevations: elevations(red, green, blue); // umbra, penumbra, ambient",
                    "@include elevation-vars($elevations);"
                ]
            }
        ]
    },
    "elevations-to-wc": {
        "description": [
            "<p>Translates Ignite UI for Angular CSS variables for elevations",
            "into Ignite UI for Web Components compatible ones</p>",
            ""
        ],
        "parameters": {
            "elevations": {
                "description": [
                    "<p>The elevations map to use to generate CSS variables for.</p>",
                    ""
                ]
            }
        },
        "example": [
            {
                "description": [
                    "<p>Translates igx- prefixed variables for elevations to igc- prefixed ones.</p>",
                    ""
                ],
                "code": [
                    "$elevations: elevations(red, green, blue);",
                    "@include elevations-to-wc($elevations);"
                ]
            }
        ]
    },
    "color-classes": {
        "description": [
            "<p>Generates CSS class names for all colors from",
            "for a given property and color palette, with",
            "optional prefix and suffix attached to the class name.</p>",
            ""
        ],
        "parameters": {
            "prop": {
                "description": [
                    "<p>The CSS property to assign the palette color to.</p>",
                    ""
                ]
            },
            "prefix": {
                "description": [
                    "<p>A prefix to be attached to the class name.</p>",
                    ""
                ]
            },
            "suffix": {
                "description": [
                    "<p>A suffix to be attached to the class name.</p>",
                    ""
                ]
            },
            "palette": {
                "description": [
                    "<p>The igx palette to use to generate css class names for.</p>",
                    ""
                ]
            }
        },
        "example": [
            {
                "description": [
                    "<p>Generate background classes with colors from the palette.</p>",
                    ""
                ],
                "code": [
                    "// Will generate class names like",
                    "// .igx-primary-500-bg { ... };",
                    "@include color-classes(",
                    "  $prop: 'background-color',",
                    "  $suffix: 'bg'",
                    ");"
                ]
            }
        ]
    },
    "css-vars": {
        "description": [
            "<p>Add theme colors to a scope.</p>",
            ""
        ],
        "parameters": {
            "theme": {
                "description": [
                    "<p>The component theme to be used</p>",
                    ""
                ]
            }
        }
    },
    "if-ltr": {
        "description": [
            "<p>Compiles the passed content to CSS only if",
            "the global $direction variable is set to &#39;ltr&#39;.</p>",
            ""
        ],
        "example": [
            {
                "description": [
                    "<p>Include content only if $direction is set to ltr (default)</p>",
                    ""
                ],
                "code": [
                    "@include if-ltr {",
                    "  margin-right: 8px;",
                    "}"
                ]
            }
        ]
    },
    "if-rtl": {
        "description": [
            "<p>Compiles the passed content to CSS only if",
            "the global $direction variable is set to &#39;rtl&#39;.</p>",
            ""
        ],
        "example": [
            {
                "description": [
                    "<p>Include content only if $direction is set to rtl</p>",
                    ""
                ],
                "code": [
                    "@include if-rtl {",
                    "  margin-left: 8px;",
                    "}"
                ]
            }
        ]
    },
    "line-clamp": {
        "description": [
            "<p>Truncates text at a specific number of lines</p>",
            ""
        ],
        "parameters": {
            "lines": {
                "description": [
                    "<p>The number of lines to show</p>",
                    ""
                ]
            },
            "inline": {
                "description": [
                    "<p>Sets whether an element displays inline-box or box</p>",
                    ""
                ]
            },
            "vertical": {
                "description": [
                    "<p>Sets whether an element lays out its contents horizontally or vertically</p>",
                    ""
                ]
            }
        },
        "example": [
            {
                "description": [
                    "<p>Truncates text after the fourth line</p>",
                    ""
                ],
                "code": [
                    "@include line-clamp(4, true, true);"
                ]
            }
        ]
    }
}