{
    "IgxDragDirective": {
        "properties": {
            "data": {
                "comment": {
                    "tags": {
                        "memberof": {
                            "comment": {
                                "text": "IgxDragDirective",
                                "tagName": "memberof"
                            }
                        }
                    },
                    "shortText": [
                        "- データを `igxDrag` ディレクティブに保存します。要素で `igxDrag` のインスタンスを作成するときに設定できます。",
                        "```html",
                        "<div [igxDrag]=\"{ source: myElement }\"></div>",
                        "```"
                    ]
                }
            },
            "dragTolerance": {
                "comment": {
                    "tags": {
                        "memberof": {
                            "comment": {
                                "text": "IgxDragDirective",
                                "tagName": "memberof"
                            }
                        }
                    },
                    "shortText": [
                        "ドラッグを開始する時を示す @Input プロパティ。",
                        "デフォルトで、ドラッグ可能な要素が 5 px で移動された後にドラッグが開始します。",
                        "```html",
                        "<div igxDrag [dragTolerance]=\"100\">",
                        "        <span>Drag Me!</span>",
                        "</div>",
                        "```"
                    ]
                }
            },
            "dragChannel": {
                "comment": {
                    "tags": {
                        "memberof": {
                            "comment": {
                                "text": "IgxDragDirective",
                                "tagName": "memberof"
                            }
                        }
                    },
                    "shortText": [
                        "An @Input property that provide a way for igxDrag and igxDrop to be linked through channels.",
                        "It accepts single value or an array of values and evaluates then using strict equality.",
                        "```html",
                        "<div igxDrag [dragChannel]=\"'odd'\">",
                        "        <span>95</span>",
                        "</div>",
                        "<div igxDrop [dropChannel]=\"['odd', 'irrational']\">",
                        "        <span>Numbers drop area!</span>",
                        "</div>",
                        "```"
                    ]
                }
            },
            "ghost": {
                "comment": {
                    "tags": {
                        "memberof": {
                            "comment": {
                                "text": "IgxDragDirective",
                                "tagName": "memberof"
                            }
                        }
                    },
                    "shortText": [
                        "An @Input property that specifies if the base element should not be moved and a ghost element should be rendered that represents it.",
                        "By default it is set to `true`.",
                        "If it is set to `false` when dragging the base element is moved instead and no ghost elements are rendered.",
                        "```html",
                        "<div igxDrag [ghost]=\"false\">",
                        "     <span>Drag Me!</span>",
                        "</div>",
                        "```"
                    ]
                }
            },
            "ghostClass": {
                "comment": {
                    "tags": {
                        "memberof": {
                            "comment": {
                                "text": "IgxDragDirective",
                                "tagName": "memberof"
                            }
                        }
                    },
                    "shortText": [
                        "Sets a custom class that will be added to the `ghostElement` element.",
                        "```html",
                        "<div igxDrag [ghostClass]=\"'ghostElement'\">",
                        "        <span>Drag Me!</span>",
                        "</div>",
                        "```"
                    ]
                }
            },
            "hideBaseOnDrag": {
                "comment": {
                    "tags": {
                        "deprecated": {
                            "comment": {
                                "text": [
                                    "Please use custom base styling instead.",
                                    "ドラッグ可能な要素を非表示にする @Input プロパティ。",
                                    "デフォルトで false に設定されます。",
                                     "```html",
                                    "<div igxDrag [dragTolerance]=\"100\" [hideBaseOnDrag]=\"'true'\">",
                                    "        <span>Drag Me!</span>",
                                    "</div>",
                                    "```"
                                ],
                                "tagName": "deprecated"
                            }
                        },
                        "memberof": {
                            "comment": {
                                "text": "IgxDragDirective",
                                "tagName": "memberof"
                            }
                        }
                    }
                }
            },
            "animateOnRelease": {
                "comment": {
                    "tags": {
                        "deprecated": {
                            "comment": {
                                "text": [
                                    "Please use provided transition functions in future.",
                                    "要素が解放されたときにドラッグ可能な要素のアニメーションを有効/無効にする @Input プロパティ。",
                                     "",
                                     "デフォルトで false に設定されます。",
                                     "```html",
                                     "<div igxDrag [animateOnRelease]=\"'true'\">",
                                     "        <span>Drag Me!</span>",
                                     "</div>",
                                        "```"
                                    ],
                                    "tagName": "deprecated"
                                }
                            },
                            "memberof": {
                                "comment": {
                                    "text": "IgxDragDirective",
                                    "tagName": "memberof"
                                }
                            }
                        }
                    }
                },
                "ghostTemplate": {
                    "comment": {
                        "tags": {
                            "memberof": {
                                "comment": {
                                    "text": "IgxDragDirective",
                                    "tagName": "memberof"
                                }
                            }
                        },
                        "shortText": [
                            "An @Input property that specifies a template for the ghost element created when dragging starts and `ghost` is true.",
                            "By default a clone of the base element the igxDrag is instanced is created.",
                            "```html",
                            "<div igxDrag [ghostTemplate]=\"customGhost\">",
                            "        <span>Drag Me!</span>",
                            "</div>",
                            "<ng-template #customGhost>",
                            "     <div class=\"customGhostStyle\">",
                            "         <span>I am being dragged!</span>",
                            "     </div>",
                            "</ng-template>",
                            "```"
                    ]
                }
            },
            "ghostHost": {
                "comment": {
                    "tags": {
                        "memberof": {
                            "comment": {
                                "text": "IgxDragDirective",
                                "tagName": "memberof"
                            }
                        }
                    },
                    "shortText": [
                        "ドラッグされる要素を追加する要素を設定する @Input プロパティ。",
                        "デフォルトで、null 値に設定されて、ドラッグされる要素はボディに追加されます。",
                        "```html",
                        "<div #hostDiv></div>",
                        "<div igxDrag [ghostHost]=\"hostDiv\">",
                        "        <span>Drag Me!</span>",
                        "</div>",
                        "```"
                    ]
                }
            },
            "dragStart": {
                "comment": {
                    "tags": {
                        "memberof": {
                            "comment": {
                                "text": "IgxDragDirective",
                                "tagName": "memberof"
                            }
                        }
                    },
                    "shortText": [
                        "ドラッグ可能な要素のドラッグが開始するときにトリガーされるイベント。",
                        "```html",
                        "<div igxDrag (dragStart)=\"onDragStart()\">",
                        "        <span>Drag Me!</span>",
                        "</div>",
                        "```",
                        "```typescript",
                        "public onDragStart(){",
                        "     alert(\"The drag has stared!\");",
                        "}",
                        "```"
                    ]
                }
            },
            "dragMove": {
                "comment": {
                    "tags": {
                        "memberof": {
                            "comment": {
                                "text": "IgxDragDirective",
                                "tagName": "memberof"
                            }
                        }
                    },
                    "shortText": [
                        "Event triggered when the draggable element has been moved.",
                        "```html",
                        "<div igxDrag  (dragMove)=\"onDragMove()\">",
                        "        <span>Drag Me!</span>",
                        "</div>",
                        "```",
                        "```typescript",
                        "public onDragMove(){",
                        "     alert(\"The element has moved!\");",
                        "}",
                        "```"
                    ]
                }
            },
            "dragEnd": {
                "comment": {
                    "tags": {
                        "memberof": {
                            "comment": {
                                "text": "IgxDragDirective",
                                "tagName": "memberof"
                            }
                        }
                    },
                    "shortText": [
                        "ドラッグ可能な要素が解放されたときにトリガーされるイベント。",
                        "```html",
                        "<div igxDrag (dragEnd)=\"onDragEnd()\">",
                        "        <span>Drag Me!</span>",
                        "</div>",
                        "```",
                        "```typescript",
                        "public onDragEnd(){",
                        "     alert(\"The drag has ended!\");",
                        "}",
                        "```"
                    ]
                }
            },
            "ghostCreate": {
                "comment": {
                    "tags": {
                        "memberof": {
                            "comment": {
                                "text": "IgxDragDirective",
                                "tagName": "memberof"
                            }
                        }
                    },
                    "shortText": [
                        "Event triggered when the drag ghost element is created.",
                        "```html",
                        "<div igxDrag (ghostCreate)=\"ghostCreated()\">",
                        "        <span>Drag Me!</span>",
                        "</div>",
                        "```",
                        "```typescript",
                        "public ghostCreated(){",
                        "     alert(\"The ghost has been created!\");",
                        "}",
                        "```"
                    ]
                }
            },
            "ghostDestroy": {
                "comment": {
                    "tags": {
                        "memberof": {
                            "comment": {
                                "text": "IgxDragDirective",
                                "tagName": "memberof"
                            }
                        }
                    },
                    "shortText": [
                        "Event triggered when the drag ghost element is created.",
                        "```html",
                        "<div igxDrag (ghostDestroy)=\"ghostDestroyed()\">",
                        "        <span>Drag Me!</span>",
                        "</div>",
                        "```",
                        "```typescript",
                        "public ghostDestroyed(){",
                        "     alert(\"The ghost has been destroyed!\");",
                        "}",
                        "```"
                    ]
                }
            },
            "transitioned": {
                "comment": {
                    "tags": {
                        "memberof": {
                            "comment": {
                                "text": "IgxDragDirective",
                                "tagName": "memberof"
                            }
                        }
                    },
                    "shortText": [
                        "ドラッグ可能な要素が解放され、アニメーションが完了された後にトリガーされるイベント。",
                        "```html",
                        "<div igxDrag (transitioned)=\"onMoveEnd()\">",
                        "        <span>Drag Me!</span>",
                        "</div>",
                        "```",
                        "```typescript",
                        "public onMoveEnd(){",
                        "     alert(\"The move has ended!\");",
                        "}",
                        "```"
                    ]
                }
            },
            "dragClicked": {
                "comment": {
                    "tags": {
                        "deprecated": {
                            "comment": {
                                "text": [
                                    "ドラッグ可能な要素がクリックされたときにトリガーされるイベント。",
                                    "```html",
                                    "<div igxDrag (dragClicked)=\"dragClicked()\">",
                                    "        <span>Drag Me!</span>",
                                    "</div>",
                                    "```",
                                    "```typescript",
                                    "public dragClicked(){",
                                    "     alert(\"The element has been clicked!\");",
                                    "}",
                                    "```"
                                ],
                                "tagName": "deprecated"
                            }
                        },
                        "memberof": {
                            "comment": {
                                "text": "IgxDragDirective",
                                "tagName": "memberof"
                            }
                        }
                    }
                }
            }
        },
        "methods": {
            "setLocation": {
                "comment": {
                    "parameters": {
                        "newLocation": {
                            "comment": {
                                "text": "New location that should be applied. It is advised to get new location using getBoundingClientRects() + scroll."
                            }
                        }
                    },
                    "tags": {},
                    "shortText": "Sets desired location of the base element or ghost element if rended relative to the document."
                }
            },
            "transitionToOrigin": {
                "comment": {
                    "parameters": {
                        "customAnimArgs": {
                            "comment": {
                                "text": "Custom transition properties that will be applied when performing the transition."
                            }
                        },
                        "startLocation": {
                            "comment": {
                                "text": "Start location from where the transition should start."
                            }
                        }
                    },
                    "tags": {},
                    "shortText": [
                        "Animates the base or ghost element depending on the `ghost` input to its initial location.",
                        "If `ghost` is true but there is not ghost rendered, it will be created and animated.",
                        "If the base element has changed its DOM position its initial location will be changed accordingly."
                    ]
                }
            },
            "transitionTo": {
                "comment": {
                    "parameters": {
                        "target": {
                            "comment": {
                                "text": "Target that the base or ghost will transition to. It can be either location in the page or another HTML element."
                            }
                        },
                        "customAnimArgs": {
                            "comment": {
                                "text": "Custom transition properties that will be applied when performing the transition."
                            }
                        },
                        "startLocation": {
                            "comment": {
                                "text": "Start location from where the transition should start."
                            }
                        }
                    },
                    "tags": {},
                    "shortText": [
                        "Animates the base or ghost element to a specific target location or other element using transition.",
                        "If `ghost` is true but there is not ghost rendered, it will be created and animated.",
                        "It is recommended to use 'getBoundingClientRects() + pageScroll' when determining desired location."
                    ]               
            }
        },
            "dropFinished": {
                "comment": {
                    "tags": {
                        "deprecated": {
                            "comment": {
                                "text": [
                                    "This method will be removed in future major version. Please use `transitionToOrigin` or `transitionTo`.",
                                    "ドロップ/リリースしている igxDrag ディレクティブに通知します。",
                                    "通常 animateOnRelease を true に設定したときに呼び出されます。",
                                    "This should usually be called when `animateOnRelease` is set to `true`.",
                                    "カスタム ドロップ ロジックをキャンセルまたは定義する場合、igxDrag の位置を更新して新しい位置に正しくアニメーションします。",
                                    "```typescript",
                                    "public onDropElem(event) {",
                                    "    // Function bound to the igxDrop directive event `onDrop`",
                                    "    // This cancels the default drop logic of the `igxDrop`",
                                    "    event.cancel = true;",
                                    "    event.drag.dropFinished();",
                                    "}",
                                    "```"
                                ],
                                "tagName": "deprecated"
                            }
                        }
                    }
                }
            }
        },
        "accessors": {
            "ghostOffsetX": {
                "setter": {
                    "comment": {
                        "tags": {
                            "memberof": {
                                "comment": {
                                    "text": "IgxDragDirective",
                                    "tagName": "memberof"
                                }
                            }
                        },
                        "shortText": [
                            "An @Input property that specifies the offset of the ghost created relative to the mouse in pixels.",
                            "By default it's taking the relative position to the mouse when the drag started and keeps it the same.",
                            "```html",
                            "<div #hostDiv></div>",
                            "<div igxDrag [ghostOffsetX]=\"0\">",
                            "        <span>Drag Me!</span>",
                            "</div>",
                            "```"
                        ]
                    }
                },
                "getter": {
                    "comment": {
                        "shortText": [
                            "An @Input property that specifies the offset of the ghost created relative to the mouse in pixels.",
                            "By default it's taking the relative position to the mouse when the drag started and keeps it the same.",
                            "```html",
                            "<div #hostDiv></div>",
                            "<div igxDrag [ghostOffsetX]=\"0\">",
                            "        <span>Drag Me!</span>",
                            "</div>",
                            "```"
                        ]
                    }
                }
            },
            "ghostOffsetY": {
                "setter": {
                    "comment": {
                        "tags": {
                            "memberof": {
                                "comment": {
                                    "text": "IgxDragDirective",
                                    "tagName": "memberof"
                                }
                            }
                        },
                        "shortText": [
                            "An @Input property that specifies the offset of the ghost created relative to the mouse in pixels.",
                            "By default it's taking the relative position to the mouse when the drag started and keeps it the same.",
                            "```html",
                            "<div #hostDiv></div>",
                            "<div igxDrag [ghostOffsetY]=\"0\">",
                            "        <span>Drag Me!</span>",
                            "</div>",
                            "```"
                    ]
                }
             },
                "getter": {
                    "comment": {
                        "shortText": [
                            "An @Input property that specifies the offset of the ghost created relative to the mouse in pixels.",
                            "By default it's taking the relative position to the mouse when the drag started and keeps it the same.",
                            "```html",
                            "<div #hostDiv></div>",
                            "<div igxDrag [ghostOffsetY]=\"0\">",
                            "        <span>Drag Me!</span>",
                            "</div>",
                            "```"
                        ]
                    }
                }
            },
            "visible": {
                "setter": {
                    "comment": {
                        "tags": {
                            "deprecated": {
                                "comment": {
                                    "text": [
                                        "Please use native angular ways of hiding it using custom to the base element styling for future versions.",
                            "ドラッグ可能な要素の表示状態を設定します。",
                            "```typescript",
                            "@ViewChild(\"myDrag\" ,{read: IgxDragDirective})",
                            "public myDrag: IgxDragDirective;",
                            "ngAfterViewInit(){",
                            "    this.myDrag.visible = false;",
                            "}",
                            "```"
                        ],
                        "tagName": "deprecated"
                    }
                }
            },
                        "shortText": [
                            "ドラッグ可能な要素の表示状態を返します。",
                            "```typescript",
                            "@ViewChild(\"myDrag\" ,{read: IgxDragDirective})",
                            "public myDrag: IgxDragDirective;",
                            "ngAfterViewInit(){",
                            "    let dragVisibility = this.myDrag.visible;",
                            "}",
                            "```"
                        ]
                    }
            },
                "getter": {
                    "comment": {
                        "shortText": [
                            "Returns the visibility state of the draggable element.",
                            "```typescript",
                            "@ViewChild(\"myDrag\" ,{read: IgxDragDirective})",
                            "public myDrag: IgxDragDirective;",
                            "ngAfterViewInit(){",
                            "    let dragVisibility = this.myDrag.visible;",
                            "}",
                            "```"
                        ]
                    }
                }
            },
            "location": {
                "getter": {
                    "comment": {
                        "shortText": "Gets the current location of the element relative to the page."
                    }
                }
            },
            "originLocation": {
                "getter": {
                    "comment": {
                        "shortText": "Gets the original location of the element before dragging started."
                    }
                }
            }
        }
    }
}
